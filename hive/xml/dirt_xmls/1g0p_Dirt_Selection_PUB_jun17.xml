<?xml version="1.0" ?>

<!-- Some basic information, a tag that defines uniquely this analysis, and a topology that also defines it -->
<topology tag="InvDirt1g0p" name ="1#gamma0p" def = "reco_vertex_size==1 &amp;&amp; reco_asso_showers==1  &amp;&amp; reco_asso_tracks==0" bdtcut = "(0.5)" />
<!--(Cosmic, BNB,NCPi0,Nue)-->

<!-- ================================================== BDT FILES [First the ones that we stack in things]==================================================== -->

<filedir>/pnfs/uboone/persistent/users/markross/single_photon_persistent_data/ </filedir>


<!--activeTPC events-->
<bdtfile filename = "vertexed_mcc9_v33/Test/ncdeltarad_overlay_test_run1_v33.0.root" tag = "NCDeltaRadOverlay" hist_style = "hist" dirs = "singlephotonana/" col = "(1.0,0.4,0.4)" plot_name = "x2 SM NC #Delta Radiative (LEE)" scale = "2.0" plot_on_top = "false" signal = "true">
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
    </definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/ncdeltarad_overlay_test_run1_v33.0.root" tag = "NCDeltaRadOverlaySM" hist_style = "hist" dirs = "singlephotonana/" col = "(0.97,0.75,0.0)" plot_name = "1x SM NC #Delta Radiative" signal = "true" plot_on_top = "false" >
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
    </definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/ncpi0_overlay_test_run1_v33.0.root" tag = "NCPi0" hist_style = "hist" dirs = "singlephotonana/" col = "(0.6,0.8,1.0)" plot_name = "BNB NC 1 #pi^{0}" scale = "1.0">
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> mctruth_cc_or_nc==1 </cut>
        <cut> mctruth_num_exiting_pi0==1</cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
    </definition>
</bdtfile>


<bdtfile filename = "vertexed_mcc9_v33/ccpi0_overlay_run1_v33.0.root" tag = "CCPi0" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.8,1.0)" plot_name = "BNB CC 1 #pi^{0}" scale = "1.0">
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> mctruth_cc_or_nc==0 </cut>
        <cut> mctruth_num_exiting_pi0==1</cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
    </definition>
</bdtfile>


<bdtfile filename = "vertexed_mcc9_v33/Test/bnb_overlay_test_run1_v33.0.root" tag = "BNBOverlays" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "BNB Other" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> fabs(mctruth_nu_pdg)==14  </cut>
        <cut> !(mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
        <cut> !(mctruth_cc_or_nc==0 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
    </definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/nue_overlay_test_run1_v33.0.root" tag = "NueOverlays" hist_style = "hist" dirs = "singlephotonana/" col = "(0.9,0.5,0.9)" plot_name = "#nu_{e} Intrinsic" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> fabs(mctruth_nu_pdg)==12  </cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
    </definition>
</bdtfile>

<!--
<bdtfile filename = "vertexed_mcc9_v33/dirt_overlay_run1_v33.0.root" tag = "Dirt" hist_style = "hist" dirs = "singlephotonana/" col = "(0.6,0.4,0.2)" plot_name = "Dirt" > 
    <definition><cut>1</cut>
		<cut> pow((mctruth_nu_vertex_x-128.175),2)+pow(mctruth_nu_vertex_y,2)&lt;36714.3921</cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
		</definition>
</bdtfile>
-->



<!--outside activeTPC events-->
<bdtfile filename = "vertexed_mcc9_v33/Test/ncdeltarad_overlay_test_run1_v33.0.root" tag = "otpcNCDeltaRadOverlay" hist_style = "hist" dirs = "singlephotonana/" col = "(0.8,0.4,0.3)" plot_name = "Dirt" scale = "3.0" plot_on_top = "false" group = "1">
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>
        <cut> !(mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35&amp;&amp;
		mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 &amp;&amp; 
        mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8) </cut>
    </definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/dirt_overlay_run1_v33.0.root" tag = "otpcDirtsig" hist_style = "hist" scale = "3.0" dirs = "singlephotonana/" col = "(0.6,0.4,0.2)" plot_name = "OTPC Dirt" group = "1"> 
	<definition><cut>mctruth_is_delta_radiative==1</cut>
	<cut> !(mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35&amp;&amp;
			mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 &amp;&amp; 
			mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8) </cut>
	</definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/bnb_overlay_test_run1_v33.0.root" tag = "otpcBNB" hist_style = "hist" dirs = "singlephotonana/" col = "(0.6,0.6,0.6)" plot_name = "OTPC BNB NC 1 #pi^{0}" scale = "1.0" group = "1">
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> !(mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35&amp;&amp;
		mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 &amp;&amp; 
        mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8) </cut>
    </definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/dirt_overlay_run1_v33.0.root" tag = "otpcDirt" hist_style = "hist" dirs = "singlephotonana/" col = "(0.6,0.4,0.2)" plot_name = "OTPC Dirt" group = "1"> 
	<definition><cut>mctruth_is_delta_radiative==0</cut>
	<cut> !(mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35&amp;&amp;
			mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 &amp;&amp; 
			mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8) </cut>
	</definition>
</bdtfile>


<!--Data-->
	<bdtfile filename = "vertexed_mcc9_v26/data_5e19_run1_v26.51.root" tag = "Data5e19" hist_style = "E1p" dirs = "singlephotonana/" col = "(0.0,0.0,0.0)" plot_name = "On-Beam Data">
	<definition><cut>1</cut>
	</definition>
	<data type="OnBeam">
	<tor860_wcut> 4.026e+19 </tor860_wcut>   
	<E1DCNT_wcut> 8915733.0</E1DCNT_wcut>   
	</data>
	</bdtfile>
	<bdtfile filename = "vertexed_mcc9_v26/AllRun/Split/bnbext_test_run1_v26.5.root" tag = "BNBext" hist_style = "hist" dirs = "singlephotonana/" col = "(0.2,0.8,0.2)" plot_name = "Cosmic Data" fillstyle = "3333" scale = "1" >
	<definition>
	<cut> 1</cut>
	</definition>
	<data type="OffBeam">
	<tor860_wcut> 4.026e+19 </tor860_wcut>   
	<E1DCNT_wcut> 8915733.0</E1DCNT_wcut>   
	<EXT>36566176.0</EXT>  
	</data>
	</bdtfile>


	<!-- ================================================== BDT FILES [Now the training files]==================================================== -->
	<bdtfile filename = "vertexed_mcc9_v33/Train/ncdeltarad_overlay_train_v33.0.root" tag = "NCDeltaRadOverlayTrain" hist_style = "hist" dirs = "singlephotonana/" col = "(1.0,0.4,0.4)" plot_name = "NC Delta Train">
	<definition>
	<cut> mctruth_is_delta_radiative==1 </cut>  
	<cut> mctruth_nu_vertex_x &gt; 5.0 &amp;&amp; mctruth_nu_vertex_x &lt; 252.35 </cut>
	<cut> mctruth_nu_vertex_y &gt; -111.5 &amp;&amp; mctruth_nu_vertex_y &lt; 111.5 </cut>
	<cut> mctruth_nu_vertex_z &gt; 5.0 &amp;&amp; mctruth_nu_vertex_z &lt; 1031.8 </cut> 
	<!--    <cut> TMath::Min(reco_track_end_dist_to_SCB,reco_track_start_dist_to_SCB)>2 </cut> -->
	<!--        <cut> mctruth_daughters_pdg==22 &amp;&amp; mctruth_daughters_status_code==1 &amp;&amp; mctruth_daughters_endx>2 </cut>-->
	<cut> mctruth_cc_or_nc == 1 </cut>
	<cut> mctruth_num_exiting_pi0 == 0</cut>
	<cut> mctruth_exiting_photon_energy &gt; 0.02 </cut>
	<cut> Sum$(mctruth_exiting_proton_energy-0.93827 &gt; 0.02 ) ==0 </cut>
	</definition>
	<training>
	<cut> sim_shower_overlay_fraction[0] &lt; 0.5 </cut>
	<cut> sim_shower_pdg[0] == 22 </cut>
	</training>
	</bdtfile>

	<bdtfile filename = "vertexed_mcc9_v33/Train/ncpi0_overlay_train_v33.0.root" tag = "NCpi0Train" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "NCpi0 Train" >
	<definition>
	<cut> !mctruth_is_delta_radiative==1 </cut>  
	<cut> (mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
	</definition>
	<training>
	<cut> sim_shower_overlay_fraction[0]&lt;0.9</cut>
	<cut> sim_shower_pdg[0]==22</cut>
	</training>
	</bdtfile>


	<bdtfile filename = "vertexed_mcc9_v33/Train/bnb_overlay_train_v33.0.root" tag = "BNBOverlaysTrain" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "BNB Other Train" >
	<definition>
	<cut> !mctruth_is_delta_radiative==1 </cut>  
	<cut> !(mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
	<!-- <cut> fabs(mctruth_nu_pdg)==14  </cut> -->
	</definition>
	<training>
	<cut> sim_shower_overlay_fraction[0]&lt;0.95</cut>
	</training>
	</bdtfile>

	<bdtfile filename = "vertexed_mcc9_v26/AllRun/Split/bnbext_train_v26.5.root" tag = "BNBextTrain" hist_style = "hist" dirs = "singlephotonana/" col = "(0.2,0.8,0.2)" plot_name = "Cosmic Data Training" fillstyle = "3333" scale = "1">
	<definition>
	<cut>1</cut>
	</definition>
	<training><cut>1</cut></training>
	</bdtfile>


	<!-- ============================================== ACTUAL BDT TMVA Setup ==================================== -->

	<mva type="BDT" use="yes" tag = "COSMIC" name ="Cosmic focused BDT" binning = "(40,0.0,1.0)">
	<method type = "XGBoost" use = "yes">
	<param> n_trees=525</param>
	<param> tree_method=exact</param>
	<param> n_gpus=0</param>
	<param> objective=binary:logistic</param>
	<param> eval_metric=logloss</param>
	<!--<param> eval_metric=auc</param>-->
	<param> min_child_weight=1</param>
	<param> gamma=1.0</param>
	<param> max_depth=5</param>
	<param> verbosity=1</param>
	<param> eta=0.02</param>
	<param> subsample=0.9</param>
	</method>
	<file
	bkg_train_tag = "BNBextTrain" 
	bkg_test_tag = "BNBext"
	bkg_test_cut = "1" 
	sig_train_tag = "NCDeltaRadOverlayTrain"
	sig_test_tag = "NCDeltaRadOverlay"
	sig_test_cut = "1"
	/>
	<scan min = "0.8" max = "1.0" steps="35"/>
	</mva>

	<mva type="BDT" use="no" tag = "BNB" name ="BNB focused BDT" binning = "(24,0.0,1.0)">
	<method type = "XGBoost" use = "yes">
	<param> n_trees= 250</param>
	<param> tree_method=exact</param>
	<param> n_gpus=0</param>
	<param> objective=binary:logistic</param>
	<param> min_child_weight=1</param> 
	<param> gamma=1.6</param>          <!--   Minimum reduction required to split . The larger gamma is, the more conservative the algorithm will be.    -->
	<param> max_depth=7</param>    <!-- How many layers deep each tree -->
	<param> eta=0.02</param>        <!-- Learning Rate -->
	<param> subsample=0.85</param> <!-- % of events passed to each tree -->
	<param> colsample_bytree= 0.95</param>   <!-- % of features that are passed to each tree  -->
	</method>
	<file
	bkg_train_tag = "BNBOverlaysTrain"
	bkg_test_tag = "BNBOverlays"
	bkg_test_cut = "1"
	sig_train_tag = "NCDeltaRadOverlayTrain"
	sig_test_tag = "NCDeltaRadOverlay"
	sig_test_cut = "1"
	/>
	<scan min = "0.76" max = "0.78" steps="5"/>
	</mva>

	<mva type="BDT" use="no" tag = "NCPi0" name ="NCpi0 focused BDT" binning = "(24,0.0,1.0)">
	<method type = "XGBoost" use = "yes">
	<param> n_trees= 400</param>
	<param> tree_method=exact</param>
	<param> n_gpus=0</param>
	<param> objective=binary:logistic</param>
	<param> gamma=0.75</param>          <!--   Minimum reduction required to split . The larger gamma is, the more conservative the algorithm will be.    -->
	<param> max_depth=7</param>    <!-- How many layers deep each tree -->
	<param> eta=0.01</param>        <!-- Learning Rate -->
	<param> subsample=0.88</param> <!-- % of events passed to each tree -->
	<param> colsample_bytree= 0.9</param>   <!-- % of features that are passed to each tree  -->
	<param> verbosity=1</param>   
	</method>
	<file      
	bkg_train_tag = "NCpi0Train"
	bkg_test_tag = "NCPi0"
	bkg_test_cut = "1"
	sig_train_tag = "NCDeltaRadOverlayTrain"
	sig_test_tag = "NCDeltaRadOverlay"
	sig_test_cut = "1"
	/>
	<scan min = "0.61" max = "0.63" steps="5"/>
	</mva>


	<!-- ================================================== PRE-CUTS   ==================================================== -->

	<!--<precut def = "reco_track_displacement<85&amp;&amp;reco_track_displacement>65" name = "track cut"/>-->


	<alias key="d_scx" value ="reco_shower_dirx[0]*(128.175-reco_shower_startx[0])"/>
	<alias key="d_scy" value ="reco_shower_diry[0]*(0-reco_shower_starty[0])"/>
	<alias key="d_scz" value ="reco_shower_dirz[0]*(518.4-reco_shower_startz[0])"/>
	<alias key="d_sc" value = "sqrt(pow(reco_shower_startx[0]-128.175,2)+pow(reco_shower_starty[0],2)+pow(reco_shower_startz[0]-518.4,2))"/>

	<precut def = "reco_shower_energy_max[0]<50" name = "Michel Cut"/>
	<!--
	<precut def = "reco_shower_start_dist_to_SCB < 50" name = "Shower start Contained in SCB"/>
	-->

	<alias key = "RV" value = "#d_scx#+#d_scy#+#d_scz#"/>
	<alias key = "VY" value = "#d_scy#"/>
	<alias key = "VX" value = "#d_scx#"/>
	<alias key = "VTT" value = "#d_scx#+#d_scy#+reco_shower_dirz[0]*(1036.8-reco_shower_startz[0])"/>
	<alias key = "VZ" value = "#d_scx#+#d_scy#"/>
	<alias key = "sprecut" value = "abs(reco_shower_theta_yz[0])>0.6||reco_shower_startx[0]<5||reco_shower_startx[0]>240||abs(reco_shower_starty[0])>90"/>

	<!--
	<precut def = "(#sprecut#)" name = "Dirt selected Cut"/>
	-->
	<precut def = "((#RV# < -150 || #RV# >150)||(#VTT# < -50 || #VTT# >800)||(#VZ# < -60 || #VZ# >70)||(#VY# < -20 || #VY# >20))" name = "Select OPTC"/>
	<!--
	<precut def = "#d_scx#+#d_scy#+#d_scz#<460" name = "Inner Product btw Shower and Radial Vector Upper Limit" />
	<precut def = "#d_scx#+#d_scy#+#d_scz#>-510" name = "Inner Product btw Shower and Radial Vector Lower Limit" />
	<precut def = "#d_scy#<92" name = "Inner Product btw Shower and Vertical Vector Upper Limit" />
	<precut def = "#d_scy#>-80" name   = "Inner Product btw Shower and Vertical Vector Lower Limit"/>
	<precut def = "#d_scx#+#d_scy#+reco_shower_dirz*(1036.8-reco_shower_startz)<995" name = "Inner Product btw Shower and Vector to TPC Tip Upper Limit" />
	<precut def = "#d_scx#+#d_scy#+reco_shower_dirz*(1036.8-reco_shower_startz)>-500" name = "Inner Product btw Shower and Vector to TPC Tip Lower Limit" />
	-->
	<!-- ============================================== Variables, BDT training and otherwise ====================================== -->
<!--group 1 stage 1 are for dirt-enhanced in the inernal note-->
<!--group 1,8 stage 0 are for dirt-enhanced in the inernal note-->
	<var def = "reco_shower_startx[0]" unit = "Reconstructed Shower Start X [cm]" binning = "(12,-20,270)" type = "d" training = ""  group = "1"/>
<var def = "reco_shower_start_dist_to_SCB[0]" binning="(8,0,120)" unit = "Distance from Shower Start to SCB" type ="d" training="" logplot="false" group ="1"/>
	<var def = "reco_shower_starty[0]" unit = "Reconstructed Shower Start Y [cm]" binning = "(12,-140,140)" type = "d" training = ""  group = "1"/>
	<var def = "reco_shower_startz[0]" unit = "Reconstructed Shower Start Z [cm]" binning = "(12,-20,1100)" type = "d" training = ""  group = "1"/>
	<!--MC-Reco.-->
	<var def = "sqrt((reco_shower_startx-sim_shower_start_x)^2+(reco_shower_starty-sim_shower_start_y)^2+(reco_shower_startz-sim_shower_start_z)^2)" binning="(24,0,100)" unit = "Distance between MCTruth to Reco. Shower Start" type ="d" training = "" logplot="true" group = "0"/>


	<var def = "sqrt((reco_vertex_x[0]-reco_shower_startx[0])^2+(reco_vertex_y[0]-reco_shower_starty[0])^2+(reco_vertex_z[0]-reco_shower_startz[0])^2)" binning ="(24,0,40)" unit = "Distance between Reco. Shower Start to Reco. Vertex" type ="d" training = "" logplot="true" group="8"/>

	<!--6-->
	<var def = "reco_shower_start_dist_to_active_TPC" binning="(24,0,120)" unit = "distance from shower start to active TPC" type ="d" logplot="false" training="0" group=""/>
	<!--Center coordinate (128.175,0,518.4)-->
	<var def = "(#d_scx#+#d_scy#+#d_scz#)/(#d_sc#)" binning = "(17,-1.2,1.2)" unit = "Shower Projection on the Radial Axis (UR)" type="d" logplot="false" training="0" group="8"/>
	<var def = "(#d_scx#+#d_scy#+#d_scz#)/pow(#d_sc#,2)" binning = "(17,-0.01,0.01)" unit = "Shower Projection on the Radial Axis (UR)/R" type="d" logplot="true" training="0" group=""/>

	<!--10, Inner Product-->
	<var def = "(#d_scx#+#d_scy#+#d_scz#)" binning = "(60,-550,550)" unit = "Inner Product btw Shower and Radial Vector (RV)" type="d" logplot="true" training="0" group="8"/>
	<var def = "#d_scy#" binning = "(40,-130,140)" unit = "Inner Product btw Shower and Vertical Vector (VY)" type="d" logplot="true" training="0" group="8"/>
	<var def = "#d_scy#+#d_scx#" binning = "(40,-190,190)" unit = "Inner Product btw Shower and Vector to z-axis (VZ)" type="d" logplot="true" training="0" group="8"/>

	<var def = "#d_scx#+#d_scy#+reco_shower_dirz*(1036.8-reco_shower_startz)" binning = "(40,-700,1136.8)" unit = "Inner Product btw Shower and Vector to TPC Tip (VTT)" type="d" logplot="true" training="0" group="8"/>

	<var def = "#VX#" binning = "(40,-130,140)" unit = "Inner Product btw Shower and Horizontal Vector (VX)" type="d" logplot="true" training="0" group="8"/>

	<var def = "reco_shower_energy_max[0]/1000.0" binning = "(18,0,0.5)" unit = "Reconstructed Shower Energy [GeV]" type = "d"    training="0" group = "2"/> 
	<var def = "sqrt(pow(0.001*reco_shower_energy_max[0]*reco_shower_diry[0],2)+pow(0.001*reco_shower_energy_max[0]*reco_shower_dirx[0],2))" unit = "Photon Transverse Momentum [GeV]" binning = "(24,0,0.6)" type = "d" training = "0" group = "2"/>
	<var def = "cos(reco_shower_phi_yx[0])" binning = "(4,-1,1)" unit = "Reconstructed Shower Cos #phi_{yx}" type = "d"    training="" group = ""/>
	<var def = "cos(reco_shower_theta_yz[0])" binning = "(4,-1,1)" unit = "Reconstructed Shower Cos #theta_{yz}" type = "d"    training="" group = ""/>

	<var def = "reco_shower_phi_yx[0]" binning = "(12,-3.14,3.14)" unit = "Reconstructed Shower #phi_{yx} [rad]" type = "d"    training="012" group = "1"/>
	<var def = "reco_shower_theta_yz[0]" binning = "(12,-3.14,3.14)" unit = "Reconstructed Shower #theta_{yz} [rad]" type = "d"    training="" group = "1"/>

	<var def = "reco_shower_energy_max[0]/1000.0" binning = "(18,0,0.5)" unit = "Reconstructed Shower Energy [GeV]" type = "d"    training="" group = "8"/> 
	<var def = "reco_shower_energy_max[0]/1000.0" binning = "(1,0,0.5)" unit = "Reconstructed Shower Energy [GeV]" type = "d"    training=""/> 

	<var def = "reco_shower_dirx[0]" unit = "Reconstructed Shower Direction on X" binning = "(4,-1,1)" type = "d" training = ""  />
	<var def = "reco_shower_diry[0]" unit = "Reconstructed Shower Direction on Y" binning = "(4,-1,1)" type = "d" training = ""  />
	<var def = "reco_shower_dirz[0]" unit = "Reconstructed Shower Direction on Z" binning = "(4,-1,1)" type = "d" training = ""  />
	<!--9-->
	<var def = "reco_shower_startx" binning = "(4,-20,270)" unit = "Reconstructed Shower Start X [cm]" type="d"   training=""/>
	<var def = "reco_shower_starty" binning = "(4,-140,140)" unit = "Reconstructed Shower Start Y [cm]" type="d"   training=""/>
	<var def = "reco_shower_startz" binning = "(4,-20,1100)" unit = "Reconstructed Shower Start Z [cm]" type="d"   training=""/>


	<!--12-->

	<var def="sqrt(2.0*#C0#*#C1#*(1.0-(0.5)))/1000" binning = "(18, 0, 0.3)" unit = "Corrected #pi^{0} Invariant Mass OPANG 60deg[GeV]" type = "d"  training=""/>
	<var def="sqrt(2.0*#C0#*#C1#*(1.0))/1000" binning = "(18, 0, 0.3)" unit = "Corrected #pi^{0} Invariant Mass OPANG 90deg [GeV]" type = "d"  training=""/>


	<!--
	<alias key="C0" value ="(1.21989*reco_shower_energy_max[i_shr[0]] + 8.50486)"/>
	<alias key="C1" value ="(1.21989*reco_shower_energy_max[i_shr[1]] + 8.50486)"/>
	<alias key="OPANG1" value="(reco_shower_dirx[i_shr[0]]*reco_shower_dirx[i_shr[1]] + reco_shower_diry[i_shr[0]]*reco_shower_diry[i_shr[1]] + reco_shower_dirz[i_shr[0]]*reco_shower_dirz[i_shr[1]])" /> 
	-->
	<alias key="C0" value ="(1.21989*reco_shower_energy_max[0] + 8.50486)"/>
	<alias key="C1" value ="(1.21989*0.03 + 8.50486)"/>
	<alias key="OPANG1" value="(reco_shower_dirx[i_shr[0]]*reco_shower_dirx[i_shr[1]] + reco_shower_diry[i_shr[0]]*reco_shower_diry[i_shr[1]] + reco_shower_dirz[i_shr[0]]*reco_shower_dirz[i_shr[1]])" /> 

	<var def = "sqrt(1-pow(reco_shower_dirx[0],2))*max(max(reco_shower_dEdx_plane0_median[0]*cos(reco_shower_theta_yz[0]-2.0944),reco_shower_dEdx_plane1_median[0]*cos(reco_shower_theta_yz[0]-1.0472)),reco_shower_dEdx_plane2_median[0]*cos(reco_shower_theta_yz[0]))" binning="(5,0.0,10.0)" unit = "Max. Projected Shower median dE/dx on all planes [Mev/cm]" type = "d" logplot = "false"  training = "013"/>

	<var def = "sqrt(1-pow(reco_shower_dirx[0],2))*max(max(reco_shower_dEdx_plane0_max[0]*cos(reco_shower_theta_yz[0]-2.0944),reco_shower_dEdx_plane1_max[0]*cos(reco_shower_theta_yz[0]-1.0472)),reco_shower_dEdx_plane2_max[0]*cos(reco_shower_theta_yz[0]))" binning="(5,0.0,10.0)" unit = "Max. Projected Shower max dE/dx on all planes [Mev/cm]" type = "d" logplot = "false"  training = "013"/>


	<var def = "reco_shower_dEdx_plane2_median[0]" binning = "(5,0,10.0)" unit = "median dedx plane 2 [mev/cm]" type = "d"   training =""/>
	<var def = "reco_shower_dEdx_plane1_median[0]" binning = "(5,0,10.0)" unit = "median dedx plane 1 [mev/cm]" type = "d"   training =""/>
	<var def = "reco_shower_dEdx_plane0_median[0]" binning = "(5,0,10.0)" unit = "median dedx plane 0 [mev/cm]" type = "d"   training =""/>
	<var def = "max(max(reco_shower_dEdx_plane0_median[0],reco_shower_dEdx_plane1_median[0]),reco_shower_dEdx_plane2_median[0])" binning = "(5,0,10.0)" unit = "maximum median dedx all planes[mev/cm]" type = "d"   training =""/>

	<var def = "reco_shower_dEdx_plane2_max[0]" binning = "(5,0,10.0)" unit = "max dedx plane 2 [mev/cm]" type = "d"   training =""/>
	<var def = "reco_shower_dEdx_plane1_max[0]" binning = "(5,0,10.0)" unit = "max dedx plane 1 [mev/cm]" type = "d"   training =""/>
	<var def = "reco_shower_dEdx_plane0_max[0]" binning = "(5,0,10.0)" unit = "max dedx plane 0 [mev/cm]" type = "d"   training =""/>
	<var def = "max(max(reco_shower_dEdx_plane0_max[0],reco_shower_dEdx_plane1_max[0]),reco_shower_dEdx_plane2_max[0])" binning = "(5,0,10.0)" unit = "maximum max dedx all planes [mev/cm]" type = "d"   training =""/>

	<var def = "reco_shower_kalman_dEdx_plane2_median[0]" binning = "(5,0,10.0)" unit = "Shower dEdx plane 2 (Kalman) [MeV/cm]" type = "d"   training =""/>
	<var def = "reco_shower_kalman_dEdx_plane1_median[0]" binning = "(5,0,10.0)" unit = "Shower dEdx plane 1 (Kalman) [MeV/cm]" type = "d"   training =""/>
	<var def = "reco_shower_kalman_dEdx_plane0_median[0]" binning = "(5,0,10.0)" unit = "Shower dEdx plane 0 (Kalman) [MeV/cm]" type = "d"   training =""/>
	<var def = "max(max(reco_shower_kalman_dEdx_plane0_median[0],reco_shower_kalman_dEdx_plane1_median[0]),reco_shower_kalman_dEdx_plane2_median[0])" binning = "(5,0,10.0)" unit = "maximum kalman dedx all planes [mev/cm]" type = "d"   training =""/>

	<var def = "reco_shower3d_dEdx_plane2[0]" binning = "(5,0,10.0)" unit = "Shower3D dedx plane 2 [mev/cm]" type = "d"   training =""/>
	<var def = "reco_shower3d_dEdx_plane1[0]" binning = "(5,0,10.0)" unit = "Shower3D dedx plane 1 [mev/cm]" type = "d"   training =""/>
	<var def = "reco_shower3d_dEdx_plane0[0]" binning = "(5,0,10.0)" unit = "Shower3D dedx plane 0 [mev/cm]" type = "d"   training ="012"/>
	<var def = "max(max(reco_shower3d_dEdx_plane0[0],reco_shower3d_dEdx_plane1[0]),reco_shower3d_dEdx_plane2[0])" binning = "(5,0,10.0)" unit = "maximum shower3D dedx all planes [mev/cm]" type = "d"   training =""/>

	<!--30-->

	<var def = "TMath::Min(fabs(acos(reco_shower_dirz)),fabs(acos(-reco_shower_dirz)))" binning = "(24,0.0,1.571)" unit = "Shower Beamyness" type="d" training = "012"/>

	<var def = "TMath::Min(fabs(acos(reco_shower_diry)),fabs(acos(-reco_shower_diry)))" binning = "(24,0.0,1.571)" unit = "Shower Cosmicyness" type="d" training = "012"/>

	<var def = "Sum$(reco_flash_total_pe_in_beamgate)" binning ="(24,0,2000)" unit = "Total PE in beamgate" type ="d" training=""/>
	<var def = "Min$(reco_shower_flash_shortest_distz)" binning ="(24,0,140)" unit = "Dist shower to flash in Z" type ="d" training=""/>

	<var def = "reco_vertex_in_SCB" binning="(4,-1,3)" unit = "Vertex in SCB" type ="d" training=""/>

	<var def = "reco_shower_start_dist_to_SCB" binning="(24,0,20)" unit = "distance from shower start to SCB" type ="d" training=""/>
	<var def = "reco_shower_start_dist_to_active_TPC" binning="(24,0,20)" unit = "distance from shower start to active TPC" type ="d" training=""/>
	<var def = "reco_vertex_dist_to_SCB" binning="(24,0,75)" unit = "Distance from vertex to SCB" type ="d" training=""/>
	<var def = "reco_vertex_dist_to_active_TPC" binning="(24,0,75)" unit = "Distance from vertex to active TPC" type ="d" training=""/>

	<!--<var def = "reco_shower_energy_max[0]/1000.0" binning = "(20,0,0.2)" unit = "Reconstructed Shower Energy [GeV]" type = "d" logplot = "false"  training="0123"/>-->

	<var def = "reco_shower_energy_max[0]/1000.0" binning = "(18,0,0.5)" unit = "Reconstructed Shower Energy [GeV]" type = "d"    training="012"/> 
	<var def = "reco_shower_nuscore[0]" binning = "(24, 0, 1)" unit = "Neutrino Slice Score" type = "d"    training="012"/>


	<var def = "reco_vertex_x" binning = "(24,-20,270)" unit = "Reco Vertex X [cm]" type="d"   training=""/>
	<var def = "reco_vertex_y" binning = "(24,-140,140)" unit = "Reco Vertex Y [cm]" type="d"   training=""/>
	<var def = "reco_vertex_z" binning = "(24,-20,1100)" unit = "Reco Vertex Z [cm]" type="d"   training=""/>

	<!--<var def = "combined_score" binning = "(40,0.3,0.70)" unit = "Combined Super Score" type="d" logplot = "true" training=""/>-->
	<var def = "run_number" binning  ="(24,4900,8500)" unit = "Run Number" type="d"   training=""/>

	<!--- all of the assorted shower dE/dx's -->
	<var def = "reco_shower_kalman_dEdx_plane2_median[0]" binning = "(24,0,10.0)" unit = "Shower dEdx plane 2 (Kalman) [MeV/cm]" type = "d"   training =""/>
	<var def = "reco_shower_kalman_dEdx_plane1_median[0]" binning = "(24,0,10.0)" unit = "Shower dEdx plane 1 (Kalman) [MeV/cm]" type = "d"   training =""/>
	<var def = "reco_shower_kalman_dEdx_plane0_median[0]" binning = "(24,0,10.0)" unit = "Shower dEdx plane 0 (Kalman) [MeV/cm]" type = "d"   training =""/>
	<var def = "reco_shower_kalman_dEdx_allplane_median[0]" binning = "(24,0,10.0)" unit = "Shower dEdx all planes (Kalman) [MeV/cm]" type = "d"  training ="012"/>

	<var def = "reco_shower3d_dEdx_plane2[0]" binning = "(24,0,10.0)" unit = "Shower3D dedx plane 2 [mev/cm]" type = "d"   training =""/>
	<var def = "reco_shower3d_dEdx_plane1[0]" binning = "(24,0,10.0)" unit = "Shower3D dedx plane 1 [mev/cm]" type = "d"   training =""/>
	<var def = "reco_shower3d_dEdx_plane0[0]" binning = "(24,0,10.0)" unit = "Shower3D dedx plane 0 [mev/cm]" type = "d"   training ="012"/>

	<var def = "reco_shower_dEdx_plane2_median[0]" binning = "(9,0,10.0)" unit = "median dedx plane 2 [mev/cm]" type = "d"   training =""/>
	<var def = "reco_shower_dEdx_plane1_median[0]" binning = "(9,0,10.0)" unit = "median dedx plane 1 [mev/cm]" type = "d"   training =""/>
	<var def = "reco_shower_dEdx_plane0_median[0]" binning = "(9,0,10.0)" unit = "median dedx plane 0 [mev/cm]" type = "d"   training =""/>
	<var def = "reco_shower_dEdx_amalgamated[0]" binning="(24,0.0,10.0)" unit = "Amalgamated Shower dE/dx [Mev/cm]" type = "d"    training = ""/>

	<!-- shower geometry + calorimetry -->
	<var def = "reco_shower_impact_parameter[0]" binning = "(24,0,400)" unit = "Shower Impact Parameter [cm]" type="d" logplot="true" training=""/>

	<var def = "(reco_shower_impact_parameter[0]/reco_shower_conversion_distance[0])" binning = "(24,0,1)" unit = "Shower Impact Parameter/Shower Conversion Distance" type="d" logplot = "true" training=""/>
	<var def = "reco_shower_length[0]" binning = "(24,0,100)" unit = "Reconstructed Shower Length [cm]" type = "d"    training="012"/>
	<var def = "reco_shower_length[0]/(reco_shower_energy_max[0]/1000.0)" binning = "(24,0 ,2000)" unit = "Ratio Reconstruncted Shower Length/Reconstructed Shower Energy [cm/GeV]" type = "d" training="012"/>
	<var def = "reco_shower_opening_angle[0]" binning = "(24,0,1)" unit = "Reconstructed Shower OpAng [cm]" type = "d"    training="012"/>
	<var def = "reco_shower_phi_yx[0]" binning = "(12,-3.14,3.14)" unit = "Reconstructed Shower  #phi_{yx} [rad]" type = "d"    training="012"/>
	<var def = "reco_shower_theta_yz[0]" binning = "(12,-3.14,3.14)" unit = "Reconstructed Shower #theta_{yz} [rad]" type = "d"    training="012"/>

	<var def = "(reco_shower_trackscore[0])" binning = "(20,0,0.5)" unit = "Shower Score" type ="d" training ="012"/>
	<!--<var def = "(reco_shower_trackscore[0])" binning = "(40,0,0.5)" unit = "Shower Score" type ="d" training ="0123"/>-->


	<var def = "TMath::Min(TMath::Min(reco_shower_start_to_nearest_dead_wire_plane0,reco_shower_start_to_nearest_dead_wire_plane1),reco_shower_start_to_nearest_dead_wire_plane2)" unit = "(distance from shower start to nearest dead wire)" binning ="(24,0,3)" type="d" training="012"/>
	<var def = "reco_shower_num_daughters" binning = "(3,0,3)" unit = "Num Dau Shower" type="d" training=""/>


	<!--adding the shower end point in XYZ-->
	<var def = "reco_shower_startx[0] + (reco_shower_length[0] * reco_shower_dirx[0])" unit = "Shower End X [cm]" binning = "(24,-20,270)" type = "d" training = ""  />
	<var def = "reco_shower_starty[0] + (reco_shower_length[0] * reco_shower_diry[0])" unit = "Shower End Y [cm]" binning = "(24,-140,140)" type = "d" training = ""  />
	<var def = "reco_shower_startz[0] + (reco_shower_length[0] * reco_shower_dirz[0])" unit = "Shower End Z [cm]" binning = "(24,-20,1100" type = "d" training = ""  />

	<!-- Mark is Bored on flight to Korea variables but he remembered to grab a local copy of all stage 0 vertexed files so is doing 14 hours of "feature development" wooo -->

	<var def = "reco_shower_energy_max/(3.0*(reco_shower_num_hits_plane2+reco_shower_num_hits_plane0+reco_shower_num_hits_plane1))" unit="Ratio of energy to number of hits" binning = "(24,0,1)" type="d" training="012"/>
	<var def = "reco_shower_energy_max/(100.0*reco_shower_length*reco_shower_opening_angle)" unit = "ratio of calo energy to geometric size" binning = "(24,0,1.0)" type = "d" training = "012"/>
	<var def = "sqrt(pow(0.001*reco_shower_energy_max[0]*reco_shower_diry[0],2)+pow(0.001*reco_shower_energy_max[0]*reco_shower_dirx[0],2))" unit = "Photon Transverse Momentum [GeV]" binning = "(24,0,0.6)" type = "d" training = "012"/>


	<!--
	<var def = "TrainDirt1g0pCOSMIC_mva" binning = "(40,0,1)"  unit = "COSMIC BDT" type="d" logplot="true" training=""/>
	-->

	<!-- # sqrt(m1^2+m2^2 + 2*E2(E1 -p1cos()) -->
			<!-- ================= RECO-MC Matching ======================== -->

			<recomc>
			<def name="NC #Delta Radiative #gamma" col ="(1.0,0.4,0.4)"> 
			sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] != 111 &amp;&amp; mctruth_is_delta_radiative ==1 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
			</def> 
			<def name="CC #pi^{0}" col ="(0.0,0.0,0.4)"> 
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] == 111 &amp;&amp; mctruth_cc_or_nc==0 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def> 
    <def name = "NC #pi^{0}" col="(0.0,0.0,1.0)">
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] == 111 &amp;&amp; mctruth_cc_or_nc==1 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def>
    <def name = "Non #pi^{0} #gamma" col="(0.8,0.2,0.8)">
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] != 111 &amp;&amp; mctruth_is_delta_radiative!=1 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def>
    <def name = "Intrinsic #nu_{e} electron" col="(1.0,1.0,0.4)">
        (mctruth_lepton_pdg[0])==11 &amp;&amp; abs(sim_shower_pdg[0]) ==11 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def>
    <def name = "BNB Michel e^{#pm}" col="(1.0,0.6,0.0)">
        abs(sim_shower_pdg[0]) ==11 &amp;&amp; abs(sim_shower_parent_pdg[0])==13 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )
    </def>
    <def name = "Overlay" col="(0.2,0.8,0.2)">
        (sim_shower_overlay_fraction[0] >=0.8 )
    </def>


</recomc>


<alias key="PM" value ="(0.938272)"/>
<alias key="PE" value ="(reco_track_proton_kinetic_energy[0]+0.938272)"/>
<alias key="PP" value = "(sqrt(pow(reco_track_proton_kinetic_energy[0]+0.938272,2)-0.938272*0.938272))"/>
<alias key="LT" value ="0"/>

<alias key = "GTM" value = "sqrt(pow(0.001*reco_shower_energy_max[0]*reco_shower_diry[0],2)+pow(0.001*reco_shower_energy_max[0]*reco_shower_dirx[0],2))"/>
<alias key = "PTM" value = "sqrt(pow((reco_track_proton_kinetic_energy[0]+0.938272)*reco_track_diry[0],2)+pow((reco_track_proton_kinetic_energy[0]+0.938272)*reco_track_dirx[0],2))"/>

<alias key = "SIDX" value ="(reco_shower_startx[0]-reco_track_startx[0])/(sqrt( pow(reco_shower_startx[0]-reco_track_startx[0],2)+   pow(reco_shower_starty[0]-reco_track_starty[0],2) + pow(reco_shower_startz[0]-reco_track_startz[0],2)    ))"/>
<alias key = "SIDY" value ="(reco_shower_starty[0]-reco_track_starty[0])/(sqrt( pow(reco_shower_startx[0]-reco_track_startx[0],2)+   pow(reco_shower_starty[0]-reco_track_starty[0],2) + pow(reco_shower_startz[0]-reco_track_startz[0],2)    ))"/>
<alias key = "SIDZ" value ="(reco_shower_startz[0]-reco_track_startz[0])/(sqrt( pow(reco_shower_startx[0]-reco_track_startx[0],2)+   pow(reco_shower_starty[0]-reco_track_starty[0],2) + pow(reco_shower_startz[0]-reco_track_startz[0],2)    ))"/>

