<?xml version="1.0" ?>

<!-- Some basic information, a tag that defines uniquely this analysis, and a topology that also defines it -->
<topology tag="InvDirt1g1p" name ="1#gamma1p" def = "reco_vertex_size==1 &amp;&amp; reco_asso_showers==1  &amp;&amp; reco_asso_tracks==1" bdtcut = "(0.3,0.68,0.3,0.78)"/>

<!-- ================================================== BDT FILES [First the ones that we stack in things]==================================================== -->

<filedir>/pnfs/uboone/persistent/users/markross/single_photon_persistent_data/ </filedir>

<!--activeTPC events-->
<bdtfile filename = "vertexed_mcc9_v33/Test/ncdeltarad_overlay_test_run1_v33.0.root" tag = "NCDeltaRadOverlay" hist_style = "hist" dirs = "singlephotonana/" col = "(1.0,0.4,0.4)" plot_name = "x2 SM NC #Delta Radiative (LEE)" scale = "2.0" signal = "true" plot_on_top = "false">
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
    </definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/ncdeltarad_overlay_test_run1_v33.0.root" tag = "NCDeltaRadOverlaySM" hist_style = "hist" dirs = "singlephotonana/" col = "(0.97,0.75,0.0)" plot_name = "1x SM NC #Delta Radiative" signal = "true" plot_on_top = "false" >
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
    </definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/ncpi0_overlay_test_run1_v33.0.root" tag = "NCPi0" hist_style = "hist" dirs = "singlephotonana/" col = "(0.6,0.8,1.0)" plot_name = "BNB NC 1 #pi^{0}" scale = "1.0">
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> mctruth_cc_or_nc==1 </cut>
        <cut> mctruth_num_exiting_pi0==1</cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
    </definition>
</bdtfile>


<bdtfile filename = "vertexed_mcc9_v33/ccpi0_overlay_run1_v33.0.root" tag = "CCPi0" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.8,1.0)" plot_name = "BNB CC 1 #pi^{0}" scale = "1.0">
    <definition>
        <cut> mctruth_cc_or_nc==0 </cut>
        <cut> mctruth_num_exiting_pi0==1</cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
    </definition>
</bdtfile>


<bdtfile filename = "vertexed_mcc9_v33/Test/bnb_overlay_test_run1_v33.0.root" tag = "BNBOverlays" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "BNB Other" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> fabs(mctruth_nu_pdg)==14  </cut>
        <cut> !(mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
        <cut> !(mctruth_cc_or_nc==0 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
    </definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/nue_overlay_test_run1_v33.0.root" tag = "NueOverlays" hist_style = "hist" dirs = "singlephotonana/" col = "(0.9,0.5,0.9)" plot_name = "#nu_{e} Intrinsic" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> fabs(mctruth_nu_pdg)==12  </cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
    </definition>
</bdtfile>

<!--
<bdtfile filename = "vertexed_mcc9_v33/dirt_overlay_run1_v33.0.root" tag = "Dirt" hist_style = "hist" dirs = "singlephotonana/" col = "(0.6,0.4,0.2)" plot_name = "Dirt" > 
    <definition><cut>1</cut>
		<cut> pow((mctruth_nu_vertex_x-128.175),2)+pow(mctruth_nu_vertex_y,2)&lt;36714.3921</cut>
        <cut> mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8 </cut>
		</definition>
</bdtfile>
-->



<!--outside activeTPC events-->
<bdtfile filename = "vertexed_mcc9_v33/Test/ncdeltarad_overlay_test_run1_v33.0.root" tag = "otpcNCDeltaRadOverlay" hist_style = "hist" dirs = "singlephotonana/" col = "(0.8,0.4,0.3)" plot_name = "Dirt" scale = "3.0"  plot_on_top = "false" group = "1">
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>
        <cut> !(mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35&amp;&amp;
		mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 &amp;&amp; 
        mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8) </cut>
    </definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/dirt_overlay_run1_v33.0.root" tag = "otpcDirt0" hist_style = "hist" dirs = "singlephotonana/" col = "(0.6,0.4,0.2)" plot_name = "OTPC Dirt" scale = "3.0" group = "1"> 
    <definition><cut>mctruth_is_delta_radiative==1</cut>
        <cut> !(mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35&amp;&amp;
		mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 &amp;&amp; 
        mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8) </cut>
		</definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/bnb_overlay_test_run1_v33.0.root" tag = "otpcBNBOther" hist_style = "hist" dirs = "singlephotonana/" col = "(0.5,0.4,0.6)" plot_name = "OTPC BNB Other" group = "1" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> !(mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35&amp;&amp;
		mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 &amp;&amp; 
        mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8) </cut>
    </definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/dirt_overlay_run1_v33.0.root" tag = "otpcDirt" hist_style = "hist" dirs = "singlephotonana/" col = "(0.6,0.4,0.2)" plot_name = "OTPC Dirt" group = "1"> 
    <definition><cut>mctruth_is_delta_radiative==0</cut>
        <cut> !(mctruth_nu_vertex_x &gt; 0 &amp;&amp; mctruth_nu_vertex_x &lt; 256.35&amp;&amp;
		mctruth_nu_vertex_y &gt; -116.5 &amp;&amp; mctruth_nu_vertex_y &lt; 116.5 &amp;&amp; 
        mctruth_nu_vertex_z &gt; 0 &amp;&amp; mctruth_nu_vertex_z &lt; 1036.8) </cut>
		</definition>
</bdtfile>


<!-- Data-->
<bdtfile filename = "vertexed_mcc9_v26/data_5e19_run1_v26.51.root" tag = "Data5e19" hist_style = "E1p" dirs = "singlephotonana/" col = "(0.0,0.0,0.0)" plot_name = "On-Beam Data">
    <definition><cut>1</cut>
	</definition>
    <data type="OnBeam">
        <tor860_wcut> 4.026e+19 </tor860_wcut>   
        <E1DCNT_wcut> 8915733.0</E1DCNT_wcut>   
    </data>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v26/AllRun/Split/bnbext_test_run1_v26.5.root" tag = "BNBext" hist_style = "hist" dirs = "singlephotonana/" col = "(0.2,0.8,0.2)" plot_name = "Cosmic Data" fillstyle = "3333" scale = "1">
    <definition>
        <cut> 1 </cut>
    </definition>
    <data type="OffBeam">
        <tor860_wcut> 4.026e+19 </tor860_wcut>   
        <E1DCNT_wcut> 8915733.0</E1DCNT_wcut>   
        <EXT>36566176.0</EXT>  
    </data>
</bdtfile>


<!-- ================================================== BDT FILES [Now the training files]==================================================== -->
<bdtfile filename = "vertexed_mcc9_v33/Train/ncdeltarad_overlay_train_v33.0.root" tag = "NCDeltaRadOverlayTrain" hist_style = "hist" dirs = "singlephotonana/" col = "(1.0,0.4,0.4)" plot_name = "NC Delta Train">
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>  
        <cut> mctruth_nu_vertex_x &gt; 5.0 &amp;&amp; mctruth_nu_vertex_x &lt; 252.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -111.5 &amp;&amp; mctruth_nu_vertex_y &lt; 111.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 5.0 &amp;&amp; mctruth_nu_vertex_z &lt; 1031.8 </cut> 
    <!--    <cut> TMath::Min(reco_track_end_dist_to_SCB,reco_track_start_dist_to_SCB)>2 </cut> -->
<!--        <cut> mctruth_daughters_pdg==22 &amp;&amp; mctruth_daughters_status_code==1 &amp;&amp; mctruth_daughters_endx>2 </cut>-->
        <cut> mctruth_cc_or_nc == 1 </cut>
        <cut> mctruth_num_exiting_pi0 == 0</cut>
        <cut> mctruth_exiting_photon_energy &gt; 0.02 </cut>
        <cut> Sum$(mctruth_exiting_proton_energy-0.93827 &gt; 0.02 ) ==0 </cut>
    </definition>
    <training>
        <cut> sim_shower_overlay_fraction[0] &lt; 0.5 </cut>
        <cut> sim_shower_pdg[0] == 22 </cut>
     </training>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Train/ncpi0_overlay_train_v33.0.root" tag = "NCPi0Train" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "NCPi0 Train" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> (mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
    </definition>
    <training>
        <cut> sim_shower_overlay_fraction[0]&lt;0.9</cut>
        <cut> sim_shower_pdg[0]==22</cut>
   </training>
</bdtfile>


<bdtfile filename = "vertexed_mcc9_v33/Train/bnb_overlay_train_v33.0.root" tag = "BNBOverlaysTrain" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "BNB Other Train" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> !(mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
        <!-- <cut> fabs(mctruth_nu_pdg)==14  </cut> -->
    </definition>
    <training>
        <cut> sim_shower_overlay_fraction[0]&lt;0.95</cut>
   </training>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v26/AllRun/Split/bnbext_train_v26.5.root" tag = "BNBextTrain" hist_style = "hist" dirs = "singlephotonana/" col = "(0.2,0.8,0.2)" plot_name = "Cosmic Data Training" fillstyle = "3333" scale = "1">
    <definition>
        <cut>1</cut>
    </definition>
    <training><cut>1</cut></training>
</bdtfile>


<bdtfile filename = "vertexed_mcc9_v33/Train/ncpi0_overlay_train_v33.0.root" tag = "SSVTrain" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "SSV Train" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> (mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
    </definition>
    <training>
        <cut> sim_shower_pdg[0]==22</cut>
    </training>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/ncpi0_overlay_test_v33.0.root" tag = "SSVTest" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "SSV Test" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> (mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
    </definition>
    <training>
        <cut> sim_shower_pdg[0]==22</cut>
    </training>
</bdtfile>





<!-- ============================================== ACTUAL BDT TMVA Setup ==================================== -->

<mva type="BDT" use="yes" tag = "COSMIC" name ="Cosmic focused BDT" binning = "(24,0.0,1.0)">
    <method type = "XGBoost" use = "yes">
        <param> n_trees=1500</param>
        <param> tree_method=exact</param>
        <param> n_gpus=0</param>
        <param> objective=binary:logistic</param>
        <param> eval_metric=logloss</param>
        <param> min_child_weight=1</param> 
        <param> gamma=2</param>          <!--   Minimum reduction required to split . The larger gamma is, the more conservative the algorithm will be.    -->
        <param> max_depth=6</param>    <!-- How many layers deep each tree -->
        <param> eta=0.01</param>        <!-- Learning Rate -->
        <param> subsample=0.9</param> <!-- % of events passed to each tree -->
        <param> colsample_bytree= 0.95</param>   <!-- % of features that are passed to each tree  -->
        <param> verbosity=1</param>
    </method>
    <file
        bkg_train_tag = "BNBextTrain" 
        bkg_test_tag = "BNBext"
        bkg_test_cut = "1" 
        sig_train_tag = "NCDeltaRadOverlayTrain"
        sig_test_tag = "NCDeltaRadOverlay"
        sig_test_cut = "1"
        />
    <scan min = "0.3" max = "0.6" steps="10"/>
</mva>

<mva type="BDT" use="yes" tag = "BNB" name ="BNB focused BDT" binning = "(24,0.0,1.0)">
    <method type = "XGBoost" use = "yes">
        <param> n_trees= 600</param>
        <param> tree_method=exact</param>
        <param> n_gpus=0</param>
        <param> objective=binary:logistic</param>
        <param> min_child_weight=1</param> 
        <param> gamma=1.6</param>          <!--   Minimum reduction required to split . The larger gamma is, the more conservative the algorithm will be.    -->
        <param> max_depth=7</param>    <!-- How many layers deep each tree -->
        <param> eta=0.02</param>        <!-- Learning Rate -->
        <param> subsample=0.85</param> <!-- % of events passed to each tree -->
        <param> colsample_bytree= 0.95</param>   <!-- % of features that are passed to each tree  -->
    </method>
    <file
        bkg_train_tag = "BNBOverlaysTrain"
        bkg_test_tag = "BNBOverlays"
        bkg_test_cut = "1"
        sig_train_tag = "NCDeltaRadOverlayTrain"
        sig_test_tag = "NCDeltaRadOverlay"
        sig_test_cut = "1"
        />
    <scan min = "0.6" max = "0.8" steps="5"/>
</mva>


<mva type="BDT" use="yes" tag = "NCPi0" name ="NCPi0 focused BDT" binning = "(24,0.0,1.0)">
    <method type = "XGBoost" use = "yes">
        <param> n_trees= 450</param>
        <param> tree_method=exact</param>
        <param> n_gpus=0</param>
        <param> objective=binary:logistic</param>
        <param> gamma=0.75</param>          <!--   Minimum reduction required to split . The larger gamma is, the more conservative the algorithm will be.    -->
        <param> max_depth=7</param>    <!-- How many layers deep each tree -->
        <param> eta=0.01</param>        <!-- Learning Rate -->
        <param> subsample=0.88</param> <!-- % of events passed to each tree -->
        <param> colsample_bytree= 0.9</param>   <!-- % of features that are passed to each tree  -->
        <param> verbosity=1</param>   
    </method>
    <file      
        bkg_train_tag = "NCPi0Train"
        bkg_test_tag = "NCPi0"
        bkg_test_cut = "1"
        sig_train_tag = "NCDeltaRadOverlayTrain"
        sig_test_tag = "NCDeltaRadOverlay"
        sig_test_cut = "1"
        />
    <scan min = "0.3" max = "0.6" steps="5"/>
</mva>


<mva type="BDT" use="yes" tag = "SSV" name ="SSV focused BDT" binning = "(24,0.0,1.0)">
    <method type = "XGBoost" use = "yes">
        <param> n_trees= 1300</param>
         <param> tree_method=exact</param>
        <param> n_gpus=0</param>
        <param> objective=binary:logistic</param>
        <param> gamma=1.6</param>          <!--   Minimum reduction required to split . The larger gamma is, the more conservative the algorithm will be.    -->
        <param> max_depth=7</param>    <!-- How many layers deep each tree -->
        <param> eta=0.015</param>        <!-- Learning Rate -->
        <param> subsample=0.85</param> <!-- % of events passed to each tree -->
        <param> colsample_bytree= 0.95</param>   <!-- % of features that are passed to each tree  -->
        <param> verbosity=1</param>   
    </method>
    <file      
        bkg_train_tag = "SSVTrain"
        bkg_test_tag = "SSVTest"
        bkg_test_cut = "1"
        sig_train_tag = "NCDeltaRadOverlayTrain"
        sig_test_tag = "NCDeltaRadOverlay"
        sig_test_cut = "1"
        />
    <scan min = "0.7" max = "0.9" steps="5"/>
</mva>



<!-- ================================================== PRE-CUTS   ==================================================== -->
<alias key="d_scx" value ="reco_shower_dirx[0]*(128.175-reco_shower_startx[0])"/>
<alias key="d_scy" value ="reco_shower_diry[0]*(0-reco_shower_starty[0])"/>
<alias key="d_scz" value ="reco_shower_dirz[0]*(518.4-reco_shower_startz[0])"/>
<alias key="d_sc" value = "sqrt(pow(reco_shower_startx[0]-128.175,2)+pow(reco_shower_starty[0],2)+pow(reco_shower_startz[0]-518.4,2))"/>

<alias key="d_tcx" value ="reco_track_dirx[0]*(128.175-reco_vertex_x[0])"/>
<alias key="d_tcy" value ="reco_track_diry[0]*(0-reco_vertex_y[0])"/>
<alias key="d_tcz" value ="reco_track_dirz[0]*(518.4-reco_vertex_z[0])"/>
<alias key="d_tc" value = "sqrt(pow(reco_vertex_x[0]-128.175,2)+pow(reco_vertex_y[0],2)+pow(reco_vertex_z[0]-518.4,2))"/>


<alias key = "UR" value = "(#d_scx#+#d_scy#+#d_scz#)/(#d_sc#)"/>
<alias key = "RV" value = "#d_scx#+#d_scy#+#d_scz#"/>
<alias key = "VY" value = "#d_scy#"/>
<alias key = "VX" value = "#d_scx#"/>
<alias key = "VTT" value = "#d_scx#+#d_scy#+reco_shower_dirz[0]*(1036.8-reco_shower_startz[0])"/>
<alias key = "VZ" value = "#d_scx#+#d_scy#"/>

<alias key = "tUR" value = "(#d_tcx#+#d_tcy#+#d_tcz#)/(#d_tc#)"/>
<alias key = "tRV" value = "#d_tcx#+#d_tcy#+#d_tcz#"/>
<alias key = "tVY" value = "#d_tcy#"/>
<alias key = "tVX" value = "#d_tcx#"/>
<alias key = "tVTT" value = "#d_tcx#+#d_tcy#+reco_track_dirz*(1036.8-reco_vertex_z)"/>
<alias key = "tVZ" value = "#d_tcx#+#d_tcy#"/>

<alias key = "tetv" value = "sqrt((reco_vertex_x[0]-reco_track_endx[0])^2+(reco_vertex_y[0]-reco_track_endy[0])^2+(reco_vertex_z[0]-reco_track_endz[0])^2)"/>
<!--Track End to Vertex disance-->
<!--<precut def = "reco_track_displacement<85&amp;&amp;reco_track_displacement>65" name = "track cut"/>
<precut def = "reco_track_displacement>65" name = "track cut"/>
-->
<alias key = "sip" value = "#VY#<-10||#VY#>10||#VTT#<-100||#VTT#>400||abs(#VZ#)>30"/> <!-- shower inner products-->
<alias key = "tip" value = "#tVX#>50||#tRV#>400||#tVTT#>800"/> 
<alias key = "intersect" value ="(#tVZ#>20)&amp;&amp;(abs(#tUR#)<0.6||abs(#UR#)<0.6)&amp;&amp;(abs(#tVY#)>10||abs(#tRV#)>50)"/>
<alias key = "sprecut" value = "abs(reco_shower_theta_yz[0])>0.6||reco_shower_startx[0]<5||reco_shower_startx[0]>240||abs(reco_shower_starty[0])>90"/>
<alias key = "tprecut" value = "abs(reco_track_theta_yz[0])>0.5||reco_track_startx[0]<5||reco_track_startx[0]>240||abs(reco_track_starty[0])>90||reco_track_startz[0]<100"/>
<alias key = "reco_cut" value = "(reco_shower_conversion_distance[0]<5||#tetv#>5)"/>
<alias key = "optionprecut" value = "reco_track_endx[0]<10||reco_track_endx[0]>240||abs(reco_track_endx[0])>100||reco_track_endz[0]>1000"/>
<alias key = "energy" value = "reco_shower_energy_max[0]<50"/>
<alias key = "track_start" value = "sqrt((reco_vertex_x[0]-reco_track_startx[0])^2+(reco_vertex_y[0]-reco_track_starty[0])^2+(reco_vertex_z[0]-reco_track_startz[0])^2)"/>

<precut def = "(#sprecut#)&amp;&amp;(#tprecut#)&amp;&amp;(#energy#)&amp;&amp;#tetv#<6" name = "Dirt selected Cut"/>

<!--
<precut def = "(TMath::Min(reco_track_end_dist_to_SCB,reco_track_start_dist_to_SCB)>2 &amp;&amp; reco_vertex_dist_to_SCB > 2)" name = "Track and Vertex Contained in SCB"/>

<precut def = "reco_track_mean_trunc_dEdx_best_plane[0]<7" name ="track dEdx"/>
<precut def = "reco_shower_kalman_dEdx_plane0_median[0]<7" name ="shower0 dEdx"/>
<precut def = "reco_shower_kalman_dEdx_plane1_median[0]<7" name ="shower1 dEdx"/>
<precut def = "reco_shower_kalman_dEdx_plane2_median[0]<7" name ="shower2 dEdx"/>
-->

<!--
<precut def = "!(reco_track_mean_trunc_dEdx_best_plane[0]<7&amp;&amp;reco_shower_kalman_dEdx_plane0_median[0]<7&amp;&amp;reco_shower_kalman_dEdx_plane1_median[0]<7&amp;&amp;reco_shower_kalman_dEdx_plane2_median[0]<7)" name ="shower2 dEdx"/>

<precut def = "reco_shower_startx[0]<200" name ="shower x upper lim."/>
<precut def = "reco_shower_startx[0]>150" name ="shower x lower lim."/>

<precut def = "reco_track_mean_trunc_dEdx_best_plane[0]<7" name ="track dEdx"/>
<precut def = "reco_shower_kalman_dEdx_plane0_median[0]<7" name ="shower0 dEdx"/>
<precut def = "reco_shower_kalman_dEdx_plane1_median[0]<7" name ="shower1 dEdx"/>
<precut def = "reco_shower_kalman_dEdx_plane2_median[0]<7" name ="shower2 dEdx"/>

<precut def = "(reco_shower_startz<700)" name = "Shower Dead Z"/>
<precut def = "(reco_track_startz<700)" name = "Track start Dead Z"/>
<precut def = "(reco_track_endz<700)" name = "Track end  Dead Z"/>
<precut def = "(reco_vertex_z<700 )" name = "Vertex Dead Z"/>

<precut def = "(reco_shower_startz<700 || reco_shower_startz>740)" name = "Shower Dead Z"/>
<precut def = "(reco_track_startz<700 || reco_track_startz>740)" name = "Track start Dead Z"/>
<precut def = "(reco_track_endz<700 || reco_track_endz>740)" name = "Track end  Dead Z"/>
<precut def = "(reco_vertex_z<700 || reco_vertex_z>740)" name = "Vertex Dead Z"/>
<precut def = "#tetv#<6" name = "Dirt selected Cut"/>
-->
<!--
<precut def = "reco_shower_energy_max[0]>30" name = "Michel Cut"/>
<precut def = "(TMath::Min(reco_track_end_dist_to_SCB,reco_track_start_dist_to_SCB)>2 &amp;&amp; reco_vertex_dist_to_SCB > 2)" name = "Track and Vertex Contained in SCB"/>
-->
<!--<precut def = "(CRT_veto_nhits < 0 || Max$(CRT_veto_hit_PE)<100)" name = "crt veto"/> -->

<!-- ============================================== Variables, BDT training and otherwise ====================================== -->
<!--group 1 stage 1 are for dirt-enhanced in the inernal note-->
<!--group 1,8 stage 0 are for dirt-enhanced in the inernal note-->

<!--Observables-->
<var def = "reco_shower_start_dist_to_SCB[0]" binning="(8,0,120)" unit = "Distance from Shower Start to SCB" type ="d" training="" logplot="false" group = "1"/>
<var def = "reco_track_mean_trunc_dEdx_best_plane[0]" binning =  "(24,0,22)" unit = "Reco Track Truncated Mean dE/dx Best Plane [MeV/cm]" type = "d" logplot = "false"  training="013" group = "12"/>
<var def = "reco_track_displacement[0]" binning = "(24,0,500)" unit = "Track Displacement [cm]" type = "d" logplot = "false"  training="01" covar="cov.root"/>    
<var def = "reco_vertex_x[0]" binning = "(24,-20,270)" unit = "Reco Vertex X [cm]" type="d" logplot="false" training=""/>
<var def = "reco_vertex_y[0]" binning = "(24,-140,140)" unit = "Reco Vertex Y [cm]" type="d" logplot="false" training=""/>
<var def = "reco_vertex_z[0]" binning = "(24,-20,1100)" unit = "Reco Vertex Z [cm]" type="d" logplot="false" training=""/>
<var def = "reco_shower_startx[0]" unit = "Reconstructed Shower Start X [cm]" binning = "(12,-20,270)" type = "d" training = "" group = "1" />
<var def = "reco_shower_starty[0]" unit = "Reconstructed Shower Start Y [cm]" binning = "(12,-140,140)" type = "d" training = "" group = "1" />
<var def = "reco_shower_startz[0]" unit = "Reconstructed Shower Start Z [cm]" binning = "(12,-20,1100)" type = "d" training = "" group = "1" />

<!--addditional 10-->
<var def = "reco_track_mean_trunc_dEdx_best_plane[0]" binning =  "(24,0,12)" unit = "Reco Track Truncated Mean dE/dx Best Plane [MeV/cm]" type = "d" logplot = "false"  training="013"/>
<var def = "reco_shower_conversion_distance[0]" binning = "(24,0,100)" unit = " Reconstructed Shower conversion distance [cm]" type = "d"   logplot="true" training="01234"/>
<var def = "reco_shower_kalman_dEdx_plane2_median[0]" binning = "(24,0,20.0)" unit = "Shower dEdx plane 2 (Kalman) [MeV/cm]" type = "d" logplot = "false" training ="" group = "12"/>
<var def = "reco_shower_kalman_dEdx_plane1_median[0]" binning = "(24,0,20.0)" unit = "Shower dEdx plane 1 (Kalman) [MeV/cm]" type = "d" logplot = "false" training ="" group = "12"/>
<var def = "reco_shower_kalman_dEdx_plane0_median[0]" binning = "(24,0,20.0)" unit = "Shower dEdx plane 0 (Kalman) [MeV/cm]" type = "d" logplot = "false" training ="" group = "12"/>
<var def = "min(reco_track_end_dist_to_SCB,reco_track_start_dist_to_SCB)" binning="(24,0,120)" unit = "Min distance from track start/end to SCB" type ="d" training="" logplot="true" group="1"/>
<!--end of additional-->

<var def = "reco_shower_phi_yx[0]" binning = "(12,-3.14,3.14)" unit = "Reconstructed Shower #phi_{yx} [rad]" type = "d" logplot = "false"  training="123" group = "1"/>
<var def = "reco_shower_theta_yz[0]" binning = "(12,-3.14,3.14)" unit = "Reconstructed Shower #theta_{yz} [rad]" type = "d" logplot = "false"  training="123" group = "1"/>

<!--18-->
<var def = "reco_track_startx[0]" unit = "Reconstructed Track Start X [cm]" binning = "(12,-20,270)" type = "d" training = ""  group = "1"/>
<var def = "reco_track_starty[0]" unit = "Reconstructed Track Start Y [cm]" binning = "(12,-140,140)" type = "d" training = ""  group = "1"/>
<var def = "reco_track_startz[0]" unit = "Reconstructed Track Start Z [cm]" binning = "(12,-20,1100)" type = "d" training = ""  group = "1"/>
<var def = "reco_track_endx[0]" unit = "Reconstructed Track End X [cm]" binning = "(12,-20,270)" type = "d" training = ""  group = "8"/>
<var def = "reco_track_endy[0]" unit = "Reconstructed Track End Y [cm]" binning = "(12,-140,140)" type = "d" training = ""  group = "8"/>
<var def = "reco_track_endz[0]" unit = "Reconstructed Track End Z [cm]" binning = "(12,-20,1100)" type = "d" training = ""  group = "8"/>
<var def = "reco_track_phi_yx[0]" binning = "(12,-3.14,3.14)" unit = "Reconstructed Track  #phi_{yx} [rad]" type = "d" logplot = "false"  training="123" group = "1"/>
<var def = "reco_track_theta_yz[0]" binning = "(12,-3.14,3.14)" unit = "Reconstructed Track #theta_{yz} [rad]" type = "d" logplot = "false"  training="123" group = "1"/>

<!--26,MCTruth-->
<var def = "sqrt((reco_shower_startx-sim_shower_start_x)^2+(reco_shower_starty-sim_shower_start_y)^2+(reco_shower_startz-sim_shower_start_z)^2)" binning="(24,0,100)" unit = "Distance between MCTruth to Reco. Shower Start" type ="d" training = "" logplot="true" group = "0"/>
<!--
<var def = "sqrt((reco_vertex_x-mctruth_nu_vertex_x)^2+(reco_vertex_y-mctruth_nu_vertex_y)^2+(reco_vertex_z-mctruth_nu_vertex_z)^2)" binning ="(24,0,100)" unit = "Distance between MCTruth to Reco. Vertex" type ="d" training = "" logplot="true" group="1"/>
-->
<var def = "sqrt((reco_vertex_x[0]-reco_track_startx[0])^2+(reco_vertex_y[0]-reco_track_starty[0])^2+(reco_vertex_z[0]-reco_track_startz[0])^2)" binning ="(24,0,20)" unit = "Distance between Reco. Track Start to Reco. Vertex" type ="d" training = "" logplot="true" group="8"/>
<var def = "sqrt((reco_vertex_x[0]-reco_shower_startx[0])^2+(reco_vertex_y[0]-reco_shower_starty[0])^2+(reco_vertex_z[0]-reco_shower_startz[0])^2)" binning ="(24,0,40)" unit = "Distance between Reco. Shower Start to Reco. Vertex" type ="d" training = "" logplot="true" group="8"/>
<var def = "sqrt((reco_vertex_x[0]-reco_track_endx[0])^2+(reco_vertex_y[0]-reco_track_endy[0])^2+(reco_vertex_z[0]-reco_track_endz[0])^2)" binning ="(24,0,20)" unit = "Distance between Reco. Track End to Reco. Vertex" type ="d" training = "" logplot="true" group="8"/>


<!--30-->
<!--Shower InnerProducts-->
<var def = "#RV#" binning = "(60,-530,530)" unit = "Inner Product btw Shower and Radial Vector (RV)" type="d" logplot="false" training="" group="8"/>
<var def = "#VY#" binning = "(40,-130,130)" unit = "Inner Product btw Shower and Vertical Vector (VY)" type="d" logplot="false" training="" group="8"/>
<var def = "#VTT#" binning = "(40,-1136.8,1136.8)" unit = "Inner Product btw Shower and Vector to TPC Tip (VTT)" type="d" logplot="false" training="" group="8"/>
<var def = "#VZ#" binning = "(40,-190,190)" unit = "Inner Product btw Shower and Vector to z-axis (VZ)" type="d" logplot="false" training="0" group="8"/>
<var def = "#VX#" binning = "(40,-130,140)" unit = "Inner Product btw Shower and Horizontal Vector (VX)" type="d" logplot="false" training="0" group="8"/>

<!--23-->
<!--Track InnerProducts-->
<var def = "(#tRV#)" binning = "(60,-530,530)" unit = "Inner Product btw Track and Radial Vector (tRV)" type="d" logplot="false" training="" group="8"/>
<var def = "#tVY#" binning = "(40,-130,130)" unit = "Inner Product btw Track and Vertical Vector (tVY)" type="d" logplot="false" training="" group="8"/>
<var def = "#tVTT#" binning = "(40,-1136.8,1136.8)" unit = "Inner Product btw Track and Vector to TPC Tip (tVTT)" type="d" logplot="false" training="" group="8"/>
<var def = "#tVZ#" binning = "(40,-190,190)" unit = "Inner Product btw Track and Vector to z-axis (tVZ)" type="d" logplot="false" training="0" group="8"/>
<var def = "#tVX#" binning = "(40,-190,190)" unit = "Inner Product btw Track and Horizontal Vector (tVX)" type="d" logplot="false" training="" group="8"/>
<!--27-->
<var def = "reco_shower_energy_max[0]/1000.0" binning = "(24,0,0.4)" unit = "Reconstructed Shower Energy [GeV]" type = "d" logplot = "false"  training="0123" group="8"/> 

<!--28-->
<var def = "(#d_tcx#+#d_tcy#+#d_tcz#)/(#d_tc#)" binning = "(17,-1.2,1.2)" unit = "Track Projection to the Radial Axis (tUR)" type="d" logplot="false" training="" group="8"/>
<var def = "(#d_scx#+#d_scy#+#d_scz#)/(#d_sc#)" binning = "(17,-1.2,1.2)" unit = "Shower Projection to the Radial Axis (UR)" type="d" logplot="false" training="" group="8"/>

<!--30-->
<var def = "reco_track_proton_kinetic_energy[0]" binning = "(24,0,1)" unit = "Reconstructed Track Kinetic Energy [GeV]" type = "d" logplot = "false" training = "" group="8"/>
<var def = "reco_track_displacement[0]" binning = "(24,0,500)" unit = "Track Displacement [cm]" type = "d" logplot = "false"  training="01" covar="cov.root"/>    


<var def = "(#d_tcx#+#d_tcy#+#d_tcz#)/pow(#d_tc#,2)" binning = "(17,-0.01,0.01)" unit = "Track Projection on the Radial Axis (UR)/R" type="d" logplot="true" training="" group=""/>

<var def = "reco_shower_start_dist_to_active_TPC" binning="(24,0,120)" unit = "distance from shower start to active TPC" type ="d" logplot="true" training="" />
<!--Center coordinate (128.175,0,518.4)-->
<var def = "(#d_scx#+#d_scy#+#d_scz#)/(#d_sc#)" binning = "(17,-1.2,1.2)" unit = "Shower Projection on the Radial Axis (UR)" type="d" logplot="false" training="" group=""/>
<var def = "min(reco_track_end_dist_to_SCB,reco_track_start_dist_to_SCB)" binning="(24,0,120)" unit = "Min distance from track start/end to SCB" type ="d" training="" logplot="true" group=""/>
<var def = "min(reco_track_start_dist_to_active_TPC,reco_track_end_dist_to_active_TPC)" binning="(24,0,120)" unit = "Min distance from track start/end to active TPC" type ="d" logplot="true" training="" group=""/>


<!---Others -->
<var def = "reco_shower_phi_yx[0]" binning = "(24,-3.14,3.14)" unit = "Reconstructed Shower  #phi_{yx} [rad]" type = "d" logplot = "false"  training="123"/>
<var def = "reco_shower_theta_yz[0]" binning = "(24,-3.14,3.14)" unit = "Reconstructed Shower #theta_{yz} [rad]" type = "d" logplot = "false"  training="123"/>

<var def = "reco_shower_implied_dirx" binning = "(24,-1,1)" unit = "Shower Implied Dir X" type="d" training=""/>
<var def = "reco_shower_implied_diry" binning = "(24,-1,1)" unit = "Shower Implied Dir Y" type="d" training=""/>
<var def = "reco_shower_implied_dirz" binning = "(24,-1,1)" unit = "Shower Implied Dir Z" type="d" training=""/>

<var def = "TMath::Min(fabs(acos(reco_shower_dirz)),fabs(acos(-reco_shower_dirz)))" binning = "(24,0.0,1.571)" unit = "Shower Beamyness" type="d" training = "01"/>
<var def = "TMath::Min(fabs(acos(reco_track_dirz)),fabs(acos(-reco_track_dirz)))" binning = "(24,0.0,1.571)" unit = "Track Beamyness" type="d" training = "0"/>
<var def = "TMath::Min(fabs(acos(reco_shower_diry)),fabs(acos(-reco_shower_diry)))" binning = "(24,0.0,1.571)" unit = "Shower Cosmicyness" type="d" training = "01"/>
<var def = "TMath::Min(fabs(acos(reco_track_diry)),fabs(acos(-reco_track_diry)))" binning = "(24,0.0,1.571)" unit = "Track Cosmicyness" type="d" training = "01"/>

<var def = "Sum$(reco_flash_total_pe_in_beamgate)" binning ="(24,0,4000)" unit = "Total PE in beamgate" type ="d" training=""/>
<var def = "Min$(reco_shower_flash_shortest_distz)" binning ="(24,0,200)" unit = "Dist shower to flash in Z" type ="d" training=""/>

<var def = "reco_vertex_in_SCB" binning="(4,-1,3)" unit = "Vertex in SCB" type ="d" training=""/>
<var def = "reco_track_end_in_SCB" binning="(4,-1,3)" unit = "Track end in SCB" type ="d" training=""/>

<var def = "reco_track_end_dist_to_SCB" binning="(24,0,20)" unit = "distance from track end to SCB" type ="d" training=""/>
<var def = "reco_track_start_dist_to_SCB" binning="(24,0,20)" unit = "distance from track start to SCB" type ="d" training=""/>
<var def = "reco_shower_start_dist_to_SCB" binning="(24,0,20)" unit = "distance from shower start to SCB" type ="d" training=""/>
<var def = "reco_shower_start_dist_to_active_TPC" binning="(24,0,20)" unit = "distance from shower start to active TPC" type ="d" training="1"/>

<var def = "TMath::Min(reco_track_end_dist_to_SCB,reco_track_start_dist_to_SCB)" binning="(24,0,20)" unit = "distance from track end/start to SCB" type ="d" training="0"/>
<var def = "TMath::Min(reco_track_end_dist_to_active_TPC,reco_track_start_dist_to_active_TPC)" binning="(24,0,20)" unit = "distance from track end/start to active tpc" type ="d" training=""/>

<var def = "reco_vertex_dist_to_SCB" binning="(24,0,75)" unit = "Distance from vertex to SCB" type ="d" training=""/>
<var def = "reco_vertex_dist_to_active_TPC" binning="(24,0,75)" unit = "Distance from vertex to active TPC" type ="d" training=""/>

<!--<var def = "reco_shower_energy_max[0]/1000.0" binning = "(20,0,0.2)" unit = "Reconstructed Shower Energy [GeV]" type = "d" logplot = "false"  training="0123"/>-->

<var def = "reco_shower_energy_max[0]/1000.0" binning = "(24,0,0.4)" unit = "Reconstructed Shower Energy [GeV]" type = "d" logplot = "false"  training="0123"/> 
<var def = "reco_shower_nuscore[0]" binning = "(24, 0, 1)" unit = "Neutrino Slice Score" type = "d" logplot = "false"  training="01"/>


<var def = "reco_vertex_x[0]" binning = "(24,-20,270)" unit = "Reco Vertex X [cm]" type="d" logplot="false" training=""/>
<var def = "reco_vertex_y[0]" binning = "(24,-140,140)" unit = "Reco Vertex Y [cm]" type="d" logplot="false" training=""/>
<var def = "reco_vertex_z[0]" binning = "(24,-20,1100)" unit = "Reco Vertex Z [cm]" type="d" logplot="false" training=""/>

<!--<var def = "combined_score" binning = "(40,0.3,0.70)" unit = "Combined Super Score" type="d" logplot = "true" training=""/>-->
<var def = "run_number" binning  ="(24,4900,8500)" unit = "Run Number" type="d" logplot = "false" training=""/>

<!--- all of the assorted shower dE/dx's -->
<var def = "reco_shower_kalman_dEdx_plane2_median[0]" binning = "(24,0,10.0)" unit = "Shower dEdx plane 2 (Kalman) [MeV/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower_kalman_dEdx_plane1_median[0]" binning = "(24,0,10.0)" unit = "Shower dEdx plane 1 (Kalman) [MeV/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower_kalman_dEdx_plane0_median[0]" binning = "(24,0,10.0)" unit = "Shower dEdx plane 0 (Kalman) [MeV/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower_kalman_dEdx_allplane_median[0]" binning = "(24,0,10.0)" unit = "Shower dEdx all planes (Kalman) [MeV/cm]" type = "d" logplot = "false" training ="0123"/>

<var def = "reco_shower3d_dEdx_plane2[0]" binning = "(24,0,10.0)" unit = "Shower3D dedx plane 2 [mev/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower3d_dEdx_plane1[0]" binning = "(24,0,10.0)" unit = "Shower3D dedx plane 1 [mev/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower3d_dEdx_plane0[0]" binning = "(24,0,10.0)" unit = "Shower3D dedx plane 0 [mev/cm]" type = "d" logplot = "false" training ="3"/>

<var def = "reco_shower_dEdx_plane2_median[0]" binning = "(24,0,10.0)" unit = "median dedx plane 2 [mev/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower_dEdx_plane1_median[0]" binning = "(24,0,10.0)" unit = "median dedx plane 1 [mev/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower_dEdx_plane0_median[0]" binning = "(24,0,10.0)" unit = "median dedx plane 0 [mev/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower_dEdx_amalgamated[0]" binning="(24,0.0,10.0)" unit = "Amalgamated Shower dE/dx [Mev/cm]" type = "d" logplot = "false"  training = ""/>

<!-- shower geometry + calorimetry -->
<var def = "reco_shower_impact_parameter[0]" binning = "(24,0,1000)" unit = "Shower Impact Parameter [cm]" type="d" logplot="false" training="0123"/>
<var def = "(reco_shower_impact_parameter[0]/reco_shower_conversion_distance[0])" binning = "(24,0,1)" unit = "Shower Impact Parameter/Shower Conversion Distance" type="d" logplot="false" training="0123"/>
<var def = "reco_shower_implied_dirx/reco_shower_dirx" binning = "(24,-1,3)" unit = "Shower Implied Dirx/Pandora Dirx" type="d" logplot="false" training=""/>
<var def = "reco_shower_implied_diry/reco_shower_diry" binning = "(24,-1,3)" unit = "Shower Implied Diry/Pandora Diry" type="d" logplot="false" training=""/>
<var def = "reco_shower_implied_dirz/reco_shower_dirz" binning = "(46,-1,3)" unit = "Shower Implied Dirz/Pandora Dirz" type="d" logplot="false" training=""/>
<var def = "reco_shower_length[0]" binning = "(24,0,100)" unit = "Reconstructed Shower Length [cm]" type = "d" logplot = "false"  training="0123"/>
<var def = "reco_shower_length[0]/(reco_shower_energy_max[0]/1000.0)" binning = "(24,0 ,2000)" unit = "Ratio Reconstruncted Shower Length/Reconstructed Shower Energy [cm/GeV]" type = "d" training="012"/>
<var def = "reco_shower_opening_angle[0]" binning = "(24,0,1)" unit = "Reconstructed Shower OpAng [cm]" type = "d" logplot = "false"  training="123"/>

<var def = "(reco_shower_trackscore[0])" binning = "(20,0,0.5)" unit = "Shower Score" type ="d" training ="0123"/>
<!--<var def = "(reco_shower_trackscore[0])" binning = "(40,0,0.5)" unit = "Shower Score" type ="d" training ="0123"/>-->


<var def = "TMath::Min(TMath::Min(reco_shower_start_to_nearest_dead_wire_plane0,reco_shower_start_to_nearest_dead_wire_plane1),reco_shower_start_to_nearest_dead_wire_plane2)" unit = "(distance from shower start to nearest dead wire)" binning ="(24,0,3)" type="d" training="123"/>
<var def = "reco_shower_num_daughters" binning = "(3,0,3)" unit = "Num Dau Shower" type="d" training=""/>

<var def = "reco_shower_startx" binning = "(24,-20,270)" unit = "Reco Shower Start X [cm]" type="d" logplot="false" training=""/>
<var def = "reco_shower_starty" binning = "(24,-400,140)" unit = "Reco Shower Start Y [cm]" type="d" logplot="false" training=""/>
<var def = "reco_shower_startz" binning = "(24,-20,1100)" unit = "Reco Shower Start Z [cm]" type="d" logplot="false" training=""/>

<!--adding the shower end point in XYZ-->
<var def = "reco_shower_startx[0] + (reco_shower_length[0] * reco_shower_dirx[0])" unit = "Shower End X [cm]" binning = "(24,-20,270)" type = "d" training = ""  />
<var def = "reco_shower_starty[0] + (reco_shower_length[0] * reco_shower_diry[0])" unit = "Shower End Y [cm]" binning = "(24,-140,140)" type = "d" training = ""  />
<var def = "reco_shower_startz[0] + (reco_shower_length[0] * reco_shower_dirz[0])" unit = "Shower End Z [cm]" binning = "(24,-20,1100" type = "d" training = ""  />


<!-- shower + track vars -->
<var def = "reco_shower_conversion_distance[0]" binning = "(24,0,100)" unit = " Reconstructed Shower conversion distance [cm]" type = "d"   logplot="true" training="01234"/>
<var def = "log10(reco_shower_conversion_distance[0])" binning = "(24,-2,3)" unit = " Reconstructed Shower conversion distance Log[cm]" type = "d"   logplot="true" training=""/>
<var def = "log10(sqrt(pow(reco_track_startx[0]-reco_shower_startx[0],2)+pow(reco_track_starty[0]-reco_shower_starty[0],2)+pow(reco_track_startz[0]-reco_shower_startz[0],2)))" binning = "(24,-2,3)" unit = "Distance from Track Start to Shower Start Log10[cm]" type="d" training=""/>
<!--<var def = "reco_shower_energy_max[0]+reco_track_proton_kinetic_energy[0]*1000" binning = "(5,200,700)" unit = "Total Visible Energy [MeV]" type = "d" training="01"  />-->
<!--
<var def = "reco_shower_energy_max[0]+reco_track_proton_kinetic_energy[0]*1000" binning = "(5,200,700)" unit = "Total Visible Energy [MeV]" type = "d" training="01" covarfile="/uboone/app/users/markrl/SBNfit_uBooNE/new_davio/quick/whipping_star/build/bin/uBooNE_v19/constraint_test.root" covarname="before" />
-->
<var def = "TMath::Min(sqrt(pow(reco_track_endx[0]-reco_shower_startx[0],2)+pow(reco_track_endy[0]-reco_shower_starty[0],2)+pow(reco_track_endz[0]-reco_shower_startz[0],2)), sqrt(pow(reco_track_startx[0]-reco_shower_startx[0],2)+pow(reco_track_starty[0]-reco_shower_starty[0],2)+pow(reco_track_startz[0]-reco_shower_startz[0],2)))" binning = "(24,0,100)" unit = "Min distance from Shower to track start or end  cm" type="d" training="0123"/>
<var def = "(reco_track_dirx[0]*reco_shower_dirx[0]+reco_track_diry[0]*reco_shower_diry[0]+reco_track_dirz[0]*reco_shower_dirz[0])" binning = "(24,-1,1)" unit = "Cosine Angle Between Track and Shower" type ="d" training ="0123"/>
<var def = "acos(reco_track_dirx[0]*reco_shower_dirx[0]+reco_track_diry[0]*reco_shower_diry[0]+reco_track_dirz[0]*reco_shower_dirz[0])" binning = "(24,-0.1,3.3)" unit = "Angle Between Track and Shower" type ="d" training =""/>
<var def = "(reco_track_dirx[0]*reco_shower_implied_dirx[0]+reco_track_diry[0]*reco_shower_implied_diry[0]+reco_track_dirz[0]*reco_shower_implied_dirz[0])" binning = "(24,-1,1)" unit = "Cosine Angle Between Track and Shower (implied)" type ="d" training ="0123"/>

<!-- track calo + geom -->
<var def = "reco_track_displacement[0]" binning = "(24,0,500)" unit = "Track Displacement [cm]" type = "d" logplot = "false"  training="01" covar="cov.root"/>    
<var def = "reco_track_phi_yx[0]" binning = "(24,-3.14,3.14)" unit = "Reconstructed Track Phi yx" type = "d" logplot = "false"  training="2"/>
<var def = "reco_track_theta_yz[0]" binning = "(24,-3.14,3.14)" unit = "Reconstructed Track Theta yz" type = "d" logplot = "false"  training="1"/>
<var def = "log10(reco_track_spacepoint_max_dist[0])" binning = "(24,-2,2)" unit = "Reco Track Max Dist Spacepoint from Line" type = "d" training = "0123"/>
<var def = "(TMath::Min(TMath::Min(TMath::Min(fabs(reco_track_endy[0]+117), fabs(reco_track_endy[0]-117)) ,  TMath::Min(fabs(reco_track_endx[0]-0), fabs(reco_track_endx[0]-256))), TMath::Min(fabs(reco_track_endz[0]-0), fabs(reco_track_endz[0]-1036))))" binning = "(24,0,125)" unit = " Reconstructed Track End distance to wall [cm]" type = "d" logplot = "false"  training="023"/>
<var def = "(TMath::Min(TMath::Min(TMath::Min(fabs(reco_track_starty[0]+117), fabs(reco_track_starty[0]-117)) ,  TMath::Min(fabs(reco_track_startx[0]-0), fabs(reco_track_startx[0]-256))), TMath::Min(fabs(reco_track_startz[0]-0), fabs(reco_track_startz[0]-1036))))" binning = "(24,0,125)" unit = " Reconstructed Track Start distance to wall [cm]" type = "d" logplot = "false"  training="013"/>
<var def = "reco_track_mean_trunc_dEdx_best_plane[0]" binning =  "(24,0,12)" unit = "Reco Track Truncated Mean dE/dx Best Plane [MeV/cm]" type = "d" logplot = "false"  training="013"/>
<var def = "reco_track_proton_kinetic_energy[0]" binning = "(24,0,1)" unit = "Reconstructed Track Kinetic Energy [GeV]" type = "d" logplot = "false" training = ""/>
<var def = "reco_track_mean_trunc_dEdx_start_half_best_plane[0]/reco_track_mean_trunc_dEdx_end_half_best_plane[0]" binning = "(24,0,3.5)" unit = "Ratio of Truncated Mean Start/End Track dE/dx Best Plane" type = "d" logplot = "false" training = "0123"/>
<var def = "(reco_track_spacepoint_principal0[0])" binning = "(24,0,1)" unit = "Track Spacepoint Principal" type ="d" training ="01"/>
<var def = "(reco_track_trackscore[0])" binning = "(24,0.5,1)" unit = "Track Score" type ="d" training ="0123"/>
<var def = "sqrt(pow(reco_track_startx[0]-reco_vertex_x,2)+pow(reco_track_starty[0]-reco_vertex_y,2)+pow(reco_track_startz[0]-reco_vertex_z,2))" binning = "(24,0,4)" unit = "Distance from Track Start to Vertex" type="d" training="0123" group = ""/>
<var def = "reco_asso_tracks" binning = "(4,0,4)" unit = "Reco Track Num " type = "d" training=""/>
<var def = "TMath::Min(TMath::Min(reco_track_end_to_nearest_dead_wire_plane0,reco_track_end_to_nearest_dead_wire_plane1),reco_track_end_to_nearest_dead_wire_plane2)" unit = "(distance from track end to nearest dead wire)" binning ="(24,0,3)" type="d" training="123"/>
<var def = "reco_track_num_daughters" binning = "(3,0,3)" unit = "Num Daughters from Track" type="d" training=""/>

<!-- Track PID -->
<var def = "log(reco_track_pid_bragg_likelihood_mip_plane2[#LT#]/reco_track_pid_bragg_likelihood_p_plane2[#LT#])" binning = "(24, -5, 7)" unit = "Log Bragg Likelihood MIP/p Plane 2" type = "d" training = ""/>
<var def = "reco_track_pid_chi2_mu_plane2[#LT#] - reco_track_pid_chi2_p_plane2[#LT#]" binning = "(24, -400, 75)" unit = "#chi^{2}_{#mu} - #chi^{2}_{p} Plane 2" type = "d" training = ""/>   
<var def =  "reco_track_trunc_PIDA_best_plane[0]" binning = "(24, 0, 60)" unit = "Reconstructed Track PIDA Best Plane" type = "d" logplot = "false" training = ""/>
<var def =  "log10(reco_track_pid_three_plane_proton_pid[0])" binning = "(24,-2,2)"  unit ="Log( Three Plane Track PID )" type = "d" logplot = "false" training=""/>

<!-- Delta variables -->
<var def = "(reco_track_proton_kinetic_energy[0]+0.938272)*(reco_track_dirx[0])+(reco_shower_energy_max[0]*0.001)*reco_shower_dirx[0]" binning = "(24,-2,2)" unit = "Reconstructed Delta Momentum X [GeV]" type = "d" logplot = "false" training = "12" /> 
<var def = "(reco_track_proton_kinetic_energy[0]+0.938272)*(reco_track_diry[0])+(reco_shower_energy_max[0]*0.001)*reco_shower_diry[0]" binning = "(24,-2,2)" unit = "Reconstructed Delta Momentum Y [GeV]" type = "d" logplot = "false" training = "02" /> 
<var def = "(reco_track_proton_kinetic_energy[0]+0.938272)*(reco_track_dirz[0])+(reco_shower_energy_max[0]*0.001)*reco_shower_dirz[0]" binning = "(24,-1.5,1.9)" unit = "Reconstructed Delta Momentum Z [GeV]" type = "d" logplot = "false" training = "0123" /> 
<var def = "sqrt(pow((reco_track_proton_kinetic_energy[0]+0.938272)*(reco_track_dirx[0])+(reco_shower_energy_max[0]*0.001)*reco_shower_dirx[0],2)+pow(    (reco_track_proton_kinetic_energy[0]+0.938272)*(reco_track_diry[0])+(reco_shower_energy_max[0]*0.001)*reco_shower_diry[0],2))" binning = "(24,0,2)" unit = "Reconstucted Delta Transverse (YX) Momentum [GeV]" type = "d" logplot = "false" training = "0123"/>
<var def = "sqrt(#PM#*#PM#+2.0*reco_shower_energy_max[0]*0.001*(#PE#-#PP#*(reco_track_dirx[0]*reco_shower_implied_dirx[0]+reco_track_diry[0]*reco_shower_implied_diry[0]+reco_track_dirz[0]*reco_shower_implied_dirz[0])))" binning = "(24,0.9,1.6)" unit = "Implied Invariant Mass of photon-proton pair [GeV]" type  = "d" training = "0123"/>

<var def = "sqrt(#PM#*#PM#+2.0*reco_shower_energy_max[0]*0.001*(#PE#-#PP#*(reco_track_dirx[0]*#SIDX#+reco_track_diry[0]*#SIDY#+reco_track_dirz[0]*#SIDZ#)))" binning = "(24,0.9,1.6)" unit = "Implied Invariant Mass of photon-proton pair (Track Start) [GeV]" type  = "d" training = ""/>

<!-- Mark is Bored on flight to Korea variables but he remembered to grab a local copy of all stage 0 vertexed files so is doing 14 hours of "feature development" wooo -->

<var def = "reco_shower_energy_max/(3.0*(reco_shower_num_hits_plane2+reco_shower_num_hits_plane0+reco_shower_num_hits_plane1))" unit="Ratio of energy to number of hits" binning = "(24,0,1)" type="d" training="0123"/>
<var def = "reco_shower_energy_max/(100.0*reco_shower_length*reco_shower_opening_angle)" unit = "ratio of calo energy to geometric size" binning = "(24,0,1.5)" type = "d" training = "12"/>
<var def = "sqrt(pow(0.001*reco_shower_energy_max[0]*reco_shower_diry[0],2)+pow(0.001*reco_shower_energy_max[0]*reco_shower_dirx[0],2))" unit = "Photon Transverse Momentum [GeV]" binning = "(24,0,0.6)" type = "d" training = "0123"/>
<var def = "sqrt(pow(0.001*reco_shower_energy_max[0]*reco_shower_implied_diry[0],2)+pow(0.001*reco_shower_energy_max[0]*reco_shower_implied_dirx[0],2))" unit = "Photon Implied Transverse Momentum [GeV]" binning = "(24,0,0.6)" type = "d" training = "12"/>
<var def = "sqrt(pow(#PE#*reco_track_diry[0],2)+pow(#PE#*reco_track_dirx[0],2))" unit = "Proton Transverse Momentum [GeV]" binning = "(24,0,2)" type = "d" training = "0123"/>
<var def = "(#GTM#-#PTM#)/(#GTM#+#PTM#)" unit = "Transverse Momentum Assymetry" binning = "(24,-1,1)" type = "d" training = "012"/>

<var def = "(sim_shower_overlay_fraction[0]+sim_track_overlay_fraction[0])/2.0" unit = "Average Overlay Contamination" binning = "(24,0,1)" type = "d" training = "" logplot="true"/>



<!--- SSS BDT variable --> 
<!--
<var def = "log10(Min$(isolation_min_dist_trk_shr))" binning = "(24,-1,3)" unit = "Min Dist from track to shower hit log[cm]" type="d" logplot="false" training=""/>
<var def = "log10(Min$(isolation_min_dist_trk_unassoc))" binning = "(24,-1,3)" unit = "Min Dist from track to Unnass hit log[cm]" type="d" logplot="false" training=""/>
<var def = "Sum$(isolation_num_shr_hits_win_2cm_trk)" binning = "(24,0,40)" unit = "Num Shr hits in 2cm" type="d" logplot="false" training="4"/>
<var def = "Sum$(isolation_num_shr_hits_win_5cm_trk)" binning = "(24,0,40)" unit = "Num Shr hits in 5cm" type="d" logplot="false" training=""/>
<var def = "Sum$(isolation_num_shr_hits_win_10cm_trk)" binning = "(24,0,40)" unit = "Num Shr hits in 10cm" type="d" logplot="false" training="4"/>
<var def = "Sum$(isolation_num_unassoc_hits_win_2cm_trk)" binning = "(24,0,40)" unit = "Num Unnass hits in 2cm" type="d" logplot="false" training=""/>
<var def = "Sum$(isolation_num_unassoc_hits_win_5cm_trk)" binning = "(24,0,40)" unit = "Num Unnass hits in 5cm" type="d" logplot="false" training=""/>
<var def = "Sum$(isolation_num_unassoc_hits_win_10cm_trk)" binning = "(24,0,200)" unit = "Num Unnass hits in 10cm" type="d" logplot="false" training="4"/>
<var def = "sss_num_candidates" binning="(24,0,15)" unit = "Second Shower Number of  candidate" type ="d" training=""/>
<var def = "sss_num_unassociated_hits/(sss_num_associated_hits+sss_num_unassociated_hits)" binning="(24,0,1)" unit = "Fraction of unassocaited hits in slice [cm]" type ="d" training="4"/>
<var def = "log10(sss_num_unassociated_hits)" binning="(24,0,4)" unit = "Number of unassocaited hits in slice log10" type ="d" training="4"/>

<var def = "sss_ioc_ranked_en" binning = "(16,0,200)" unit ="sss2d min IOC candidate energy [MeV]" type="d" training="4"/>
<var def = "sss_ioc_ranked_conv" binning = "(16,0,120)" unit ="sss2d min IOC candidate conversion distance [cm]" type="d" training="4"/>
<var def = "sss_ioc_ranked_ioc" binning = "(16,0,1.2)" unit ="sss2d min IOC candidate IOC ratio" type="d" training="4"/>
<var def = "sss_ioc_ranked_invar" binning = "(16,0,200)" unit ="sss2d min IOC candidate invariant mass [MeV]" type="d" training="4"/>
<var def = "sss_ioc_ranked_angle_to_shower" binning = "(16,0,3.14159)" unit ="sss2d min IOC angle wrt primary shower [deg]" type="d" training="4"/>

<var def = "sss_conv_ranked_en" binning = "(16,0,200)" unit ="sss2d closest candidate energy energy [MeV" type="d" training="4"/>
<var def = "sss_conv_ranked_conv" binning = "(16,0,80)" unit ="sss2d closest candidate conversion distance [cm]" type="d" training="4"/>
<var def = "sss_conv_ranked_ioc" binning = "(16,0,1.2)" unit ="sss2d closest candidate IOC ratio" type="d" training="4"/>
<var def = "sss_conv_ranked_invar" binning = "(16,0,200)" unit ="sss2d closest candidate invariant mass [MeV]" type="d" training="4"/>
<var def = "sss_conv_ranked_angle_to_shower" binning = "(16,0,3.14159)" unit ="sss2d closest candidate angle wrt primary shower [deg]" type="d" training="4"/>

<var def = "sss3d_ioc_ranked_en" binning = "(16,0,80)" unit ="sss3d min IOC candidate energy [MeV]" type="d" training="4"/>
<var def = "sss3d_ioc_ranked_conv" binning = "(16,0,100)" unit ="sss3d min IOC candidate conversion distance [cm]" type="d" training="4"/>
<var def = "sss3d_ioc_ranked_ioc" binning = "(16,0,1.2)" unit ="sss3d min IOC candidate IOC ratio" type="d" training="4"/>
<var def = "sss3d_ioc_ranked_invar" binning = "(16,0,200)" unit ="sss3d min IOC candidate invariant mass [MeV]" type="d" training="4"/>
<var def = "sss3d_ioc_ranked_implied_invar" binning = "(16,0,200)" unit ="sss3d min IOC implied invariant mass [MeV]" type="d" training="4"/>
<var def = "sss3d_ioc_ranked_opang" binning = "(16,-1,1)" unit ="sss3d min IOC angle wrt primary shower [cos]" type="d" training="4"/>
<var def = "sss3d_ioc_ranked_implied_opang" binning = "(16,-1,1)" unit ="sss3d min IOC implied angle w.r.t primary shower [cos]" type="d" training="4"/>

<var def = "sss3d_invar_ranked_en" binning = "(16,0,200)" unit ="sss3d best invariant mass candidate energy [MeV]" type="d" training="4"/>
<var def = "sss3d_invar_ranked_conv" binning = "(16,0,100)" unit ="sss3d best invariant mass candidate conversion distance [cm]" type="d" training="4"/>
<var def = "sss3d_invar_ranked_ioc" binning = "(16,0,1.2)" unit ="sss3d best invariant mass candidate IOC ratio" type="d" training="4"/>
<var def = "sss3d_invar_ranked_invar" binning = "(20,0,200)" unit ="sss3d best invariant mass candidate invariant mass [MeV]" type="d" training="4"/>
<var def = "sss3d_invar_ranked_implied_invar" binning = "(16,0,200)" unit ="sss3d best invariant mass candidate implied invariant mass [MeV]" type="d" training="4"/>
<var def = "sss3d_invar_ranked_opang" binning = "(16,-1,1)" unit ="sss3d best invariant mass candidate angle w.r.t primary shower [cos]" type="d" training="4"/>
<var def = "sss3d_invar_ranked_implied_opang" binning = "(16,-1,1)" unit ="sss3d best invariant mass candidate implied angle w.r.t primary shower [cos]" type="d" training="4"/>
-->
<!--<var def = "genie_CV_tune_weight" binning = "(16,-1,500)" unit ="GENIE CV Tune Weight" type="d" training=""/> -->


<!--
<var def = "stage1_2BDT_XGBOOSTNCPi0_mva" binning = "(24,0,1)"  unit = "NCPi0 BDT" type="d" logplot="false" training="4"/>
<var def = "stage1_2BDT_XGBOOSTBNB_mva" binning = "(40,0,1)"  unit = "BNB BDT" type="d" logplot="false" training="4"/>
<var def = "stage1_2BDT_XGBOOSTCOSMIC_mva" binning = "(40,0,1)"  unit = "COSMIC BDT" type="d" logplot="false" training="4"/>
<var def = "stage1_2BDT_XGBOOSTNue_mva" binning = "(40,0,1)"  unit = "Nue BDT" type="d" logplot="false" training="4"/>
-->

<!-- ================= RECO-MC Matching ======================== -->

<recomc>
    <def name="NC #Delta Radiative #gamma" col ="(1.0,0.4,0.4)"> 
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] != 111 &amp;&amp; mctruth_is_delta_radiative ==1 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def> 
    <def name="CC #pi^{0}" col ="(0.0,0.0,0.4)"> 
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] == 111 &amp;&amp; mctruth_cc_or_nc==0 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def> 
    <def name = "NC #pi^{0}" col="(0.0,0.0,1.0)">
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] == 111 &amp;&amp; mctruth_cc_or_nc==1 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def>
    <def name = "Non #pi^{0} #gamma" col="(0.8,0.2,0.8)">
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] != 111 &amp;&amp; mctruth_is_delta_radiative!=1 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def>
    <def name = "Intrinsic #nu_{e} electron" col="(1.0,1.0,0.4)">
        (mctruth_lepton_pdg[0])==11 &amp;&amp; abs(sim_shower_pdg[0]) ==11 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def>
    <def name = "BNB Michel e^{#pm}" col="(1.0,0.6,0.0)">
        abs(sim_shower_pdg[0]) ==11 &amp;&amp; abs(sim_shower_parent_pdg[0])==13 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )
    </def>
    <def name = "Overlay" col="(0.2,0.8,0.2)">
        (sim_shower_overlay_fraction[0] >=0.8 )
    </def>


</recomc>


<alias key="PM" value ="(0.938272)"/>
<alias key="PE" value ="(reco_track_proton_kinetic_energy[0]+0.938272)"/>
<alias key="PP" value = "(sqrt(pow(reco_track_proton_kinetic_energy[0]+0.938272,2)-0.938272*0.938272))"/>
<alias key="LT" value ="0"/>

<alias key = "GTM" value = "sqrt(pow(0.001*reco_shower_energy_max[0]*reco_shower_diry[0],2)+pow(0.001*reco_shower_energy_max[0]*reco_shower_dirx[0],2))"/>
<alias key = "PTM" value = "sqrt(pow((reco_track_proton_kinetic_energy[0]+0.938272)*reco_track_diry[0],2)+pow((reco_track_proton_kinetic_energy[0]+0.938272)*reco_track_dirx[0],2))"/>

<alias key = "SIDX" value ="(reco_shower_startx[0]-reco_track_startx[0])/(sqrt( pow(reco_shower_startx[0]-reco_track_startx[0],2)+   pow(reco_shower_starty[0]-reco_track_starty[0],2) + pow(reco_shower_startz[0]-reco_track_startz[0],2)    ))"/>
<alias key = "SIDY" value ="(reco_shower_starty[0]-reco_track_starty[0])/(sqrt( pow(reco_shower_startx[0]-reco_track_startx[0],2)+   pow(reco_shower_starty[0]-reco_track_starty[0],2) + pow(reco_shower_startz[0]-reco_track_startz[0],2)    ))"/>
<alias key = "SIDZ" value ="(reco_shower_startz[0]-reco_track_startz[0])/(sqrt( pow(reco_shower_startx[0]-reco_track_startx[0],2)+   pow(reco_shower_starty[0]-reco_track_starty[0],2) + pow(reco_shower_startz[0]-reco_track_startz[0],2)    ))"/>

