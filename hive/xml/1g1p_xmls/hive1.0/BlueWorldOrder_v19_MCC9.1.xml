<?xml version="1.0" ?>

<!-- Some basic information, a tag that defines uniquely this analysis, and a topology that also defines it -->
<topology tag="KoreaFlightTMVA" name ="1#gamma1p" def = "reco_vertex_size==1 &amp;&amp; reco_asso_showers==1 &amp;&amp; reco_asso_tracks>=0" bdtcut = "(0.91,0.97,0.94)" />


<!-- ================================================== BDT FILES ==================================================== -->

<filedir>/pnfs/uboone/persistent/users/markross/single_photon_persistent_data/vertexed_mcc9_v19/</filedir>

<bdtfile filename = "ncdeltarad_overlay_run1_v19.3.root" tag = "NCDeltaRadOverlay" hist_style = "hist" dirs = "singlephoton/" col = "(1.0,0.4,0.4)" plot_name = "LEE Signal NC #Delta Radiative" scale = "2.0" signal = "true">
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>  
        <cut> mctruth_nu_vertex_x &gt; 10.0 &amp;&amp; mctruth_nu_vertex_x &lt; 246.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -106.5 &amp;&amp; mctruth_nu_vertex_y &lt; 106.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 10.0 &amp;&amp; mctruth_nu_vertex_z &lt; 1026.8 </cut>
        <cut> mctruth_cc_or_nc == 1 </cut>
        <cut> mctruth_num_exiting_pi0 == 0</cut>
        <cut> mctruth_exiting_photon_energy &gt; 0.02 </cut>
        <cut> Sum$(mctruth_exiting_proton_energy-0.93827 &gt; 0.02)==1</cut>
    </definition>
</bdtfile>

<bdtfile filename = "ncdeltarad_overlay_run1_v19.3.root" tag = "NCDeltaRadOverlaySM" hist_style = "hist" dirs = "singlephoton/" col = "(1.0,0.6,0.4)" plot_name = "SM NC #Delta Radiative" signal = "true" >
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>  
    </definition>
</bdtfile>

<bdtfile filename = "ncdeltarad_overlay_run3_v19.3.root" tag = "NCDeltaRadOverlayTrain" hist_style = "hist" dirs = "singlephoton/" col = "(1.0,0.4,0.4)" plot_name = "NC Delta Train">
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>  
        <cut> mctruth_nu_vertex_x &gt; 10.0 &amp;&amp; mctruth_nu_vertex_x &lt; 246.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -106.5 &amp;&amp; mctruth_nu_vertex_y &lt; 106.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 10.0 &amp;&amp; mctruth_nu_vertex_z &lt; 1026.8 </cut>
        <cut> mctruth_cc_or_nc == 1 </cut>
        <cut> mctruth_num_exiting_pi0 == 0</cut>
        <cut> mctruth_exiting_photon_energy &gt; 0.02 </cut>
        <cut> Sum$(mctruth_exiting_proton_energy-0.93827 &gt; 0.02 )==1 </cut>
    </definition>
    <training>
        <cut> sim_shower_overlay_fraction[0] &lt; 0.333 </cut>
        <cut> sim_track_overlay_fraction[0] &lt; 0.333 </cut>
        <cut> sim_track_pdg[0] == 2212</cut>
        <cut> sim_shower_pdg[0] == 22 </cut>
     </training>
</bdtfile>


<bdtfile filename = "ncpi0_overlay_run1_v19.3.root" tag = "NCPi0" hist_style = "hist" dirs = "singlephoton/" col = "(0.6,0.8,1.0)" plot_name = "BNB NC#pi^{0}" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> mctruth_cc_or_nc==1 </cut>
        <cut> mctruth_num_exiting_pi0==1</cut>
    </definition>
</bdtfile>

<bdtfile filename = "bnb_overlay_run1_v19.3.root" tag = "BNBOverlays" hist_style = "hist" dirs = "singlephoton/" col = "(0.4,0.4,1.0)" plot_name = "BNB Other" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> !(mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
    </definition>
</bdtfile>

<bdtfile filename = "dirt_overlay_run1_v19.3.root" tag = "Dirt" hist_style = "hist" dirs = "singlephoton/" col = "(0.6,0.4,0.2)" plot_name = "Dirt" > 
    <definition><cut>1</cut></definition>
</bdtfile>
<bdtfile filename = "data5e19_run1_v19.31.root" tag = "Data5e19" hist_style = "E1p" dirs = "singlephoton/" col = "(0.0,0.0,0.0)" plot_name = "On-Beam Data">
    <definition><cut>1</cut></definition>
    <data type="OnBeam">
        <tor860_wcut> 4.503e19 </tor860_wcut>   <!-- POT from zarkos tool based on exact run/subrun list-->
        <E1DCNT_wcut> 9988143.0</E1DCNT_wcut>   <!-- Spills in the on beam file -->
    </data>
</bdtfile>

<bdtfile filename = "bnbext_run1_v19.31.root" tag = "BNBext" hist_style = "hist" dirs = "singlephoton/" col = "(0.2,0.8,0.2)" plot_name = "Cosmic Data" fillstyle = "3333" scale = "2">
  <definition>
        <cut>Entry$%2==1</cut>
    </definition>
    <data type="OffBeam">
        <tor860_wcut> 4.503e19 </tor860_wcut>
        <E1DCNT_wcut> 9988143.0</E1DCNT_wcut>
        <EXT>43065681.0</EXT>  
    </data>
</bdtfile>

<!-- ============================================== ACTUAL BDT TMVA Setup ==================================== -->

<mva type="BDT" use="yes" tag = "COSMIC" name ="Cosmic focused BDT" binning = "(25,0,1)">
    <method type = "TMVA" use = "yes">
        <param>  NTrees=1500 	</param>			 <!--2000-->
        <param>  MinNodESize=2.5% </param>				
        <param>  BoostType=RealAdaBoost</param>
        <param>  AdaBoostBeta=0.075 	</param>				
        <param>  SeparationType=GiniIndEx</param>				
        <param>  UseBaggedBoost</param> 
        <param>  BaggedSampleFraction=0.5	</param>				
        <param>  nCuts=-20	</param>				
        <param>  MaxDepth=3 	</param>				
    </method>
    <file
        filename = "/pnfs/uboone/persistent/users/markross/single_photon_persistent_data/vertexed_mcc9_v19/bnbext_run1_v19.31.root"
        foldername = "singlephoton/"
        training_cut = "Entry$%2==0"       
        training_fraction = "0.5"
        />
    <scan min = "0.5" max = "0.84265" steps="10"/>
</mva>

<mva type="BDT" use="yes" tag = "BNB" name ="BNB focused BDT" binning = "(25,0,1)">
    <method type = "TMVA" use = "yes">
        <param>  NTrees=1500 	</param>			 <!--2000-->
        <param>  MinNodESize=2.5% </param>				
        <param>  BoostType=RealAdaBoost</param>
        <param>  AdaBoostBeta=0.075 	</param>				
        <param>  SeparationType=GiniIndEx</param>				
        <param>  UseBaggedBoost</param> 
        <param>  BaggedSampleFraction=0.5	</param>				
        <param>  nCuts=-20	</param>				
        <param>  MaxDepth=3 	</param>				
    </method>
    <file
        filename = "/pnfs/uboone/persistent/users/markross/single_photon_persistent_data/vertexed_mcc9_v19/bnb_overlay_run3_v19.3.root"
        foldername = "singlephoton/"
        training_cut = "!(mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0>0)    &amp;&amp; sim_shower_overlay_fraction[0]<0.8 &amp;&amp; sim_track_overlay_fraction[0]<0.8"        
        training_fraction = "0.65"
        />
    <scan min = "0.5" max = "0.717002" steps="10"/>
</mva>

<mva type="BDT" use="yes" tag = "NCPi0" name ="NCpi0 focused BDT" binning = "(25,0,1)">
    <method type = "TMVA" use = "yes">
        <param>  NTrees=500 	</param>			 <!--2000-->
        <param>  MinNodESize=2.5% </param>				
        <param>  BoostType=RealAdaBoost</param>
        <param>  AdaBoostBeta=0.075 	</param>				
        <param>  SeparationType=GiniIndEx</param>				
        <param>  UseBaggedBoost</param> 
        <param>  BaggedSampleFraction=0.5	</param>				
        <param>  nCuts=-20	</param>				
        <param>  MaxDepth=3 	</param>				
    </method>
    <file      
        filename = "/pnfs/uboone/persistent/users/markross/single_photon_persistent_data/vertexed_mcc9_v19/bnb_overlay_run3_v19.3.root"
        foldername = "singlephoton/"
        training_cut = "mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0>0 &amp;&amp; sim_shower_overlay_fraction[0]<0.5 &amp;&amp; sim_track_overlay_fraction[0]<0.8 &amp;&amp; sim_shower_pdg[0]==22"
        training_fraction = "0.50"
        />
    <scan min = "0.5" max = "0.759" steps="10"/>
</mva>

<mva type="BDT" use="yes" tag = "Nue" name ="Nue fake BDT" binning = "(25,0,1)">
    <method type = "TMVA" use = "yes">
        <param>  NTrees=500 	</param>			 <!--2000-->
        <param>  MinNodESize=2.5% </param>				
        <param>  BoostType=RealAdaBoost</param>
        <param>  AdaBoostBeta=0.075 	</param>				
        <param>  SeparationType=GiniIndEx</param>				
        <param>  UseBaggedBoost</param> 
        <param>  BaggedSampleFraction=0.5	</param>				
        <param>  nCuts=-20	</param>				
        <param>  MaxDepth=3 	</param>				
    </method>
    <file      
        filename = "/pnfs/uboone/persistent/users/markross/single_photon_persistent_data/vertexed_mcc9_v19/nueintrinsic_overlay_run1_v19.3.root"
        foldername = "singlephoton/"
        training_cut = "mctruth_num_exiting_pi0==0 &amp;&amp; sim_shower_overlay_fraction[0]<0.5 &amp;&amp; fabs(sim_shower_pdg[0]==11)"
        training_fraction = "0.50"
        />
    <scan min = "0.5" max = "0.759" steps="10"/>
</mva>



<!-- ================================================== PRE-CUTS   ==================================================== -->

<precut def = "(reco_vertex_x > 5 &amp;&amp; reco_vertex_x < 256-5 &amp;&amp; reco_vertex_y > -117+5 &amp;&amp; reco_vertex_y < 117-5 &amp;&amp; reco_vertex_z > 5 &amp;&amp; reco_vertex_z < 1036-5) " name = "Fiducial Vertex Cut" />
<!--<precut def = "(TMath::Finite(reco_track_mean_trunc_dEdx_best_plane[0]))" name = "Finite Track dE/dx"/>-->
<precut def = "reco_track_pid_three_plane_proton_pid[0]>0" name = "3D PID"/>
<!--<precut def = "((sss_num_candidates==0) || Min$(sss_candidate_impact_parameter)>17.8001)" name = "Second Shower Veto"/>-->
<!--<precut def = "acos(reco_track_dirx[0]*reco_shower_dirx[0]+reco_track_diry[0]*reco_shower_diry[0]+reco_track_dirz[0]*reco_shower_dirz[0]) > 0.05 &amp;&amp;acos(reco_track_dirx[0]*reco_shower_dirx[0]+reco_track_diry[0]*reco_shower_diry[0]+reco_track_dirz[0]*reco_shower_dirz[0]) < 3.13149-0.05 " name = "Back-to-Back cut"/>
<precut def = "reco_track_mean_trunc_dEdx_start_half_best_plane[0]/reco_track_mean_trunc_dEdx_end_half_best_plane[0] > 0.2 " name = "Stopping Track Cut" /> -->
<precut def = "(reco_track_endz[0] > 5 &amp;    &amp; reco_track_endz[0] < 1036-5) &amp;&amp;   (reco_track_endx[0] > 5 &amp;&amp; reco_track_endx[0] < 256-5 &amp;&amp; reco_track_endy[0] > -117+5 &amp;&amp; reco_track_endy[0] < 117-5 &amp;&amp; reco_track_endz[0] > 5  &amp;&amp; reco_track_endz[0] < 1036-5)" name = "Contained Track Cut" />
<precut def = "(reco_shower_energy_max[0]>30 &amp;&amp; reco_shower_energy_max[0]<2000)" name = "Shower Energy"/>
<precut def = "(sqrt(pow(reco_track_startx[0]-reco_vertex_x,2)+pow(reco_track_starty[0]-reco_vertex_y,2)+pow(reco_track_startz[0]-reco_vertex_z,2)))<10" name = "Distance from Track Start to Vertex"/>
<precut def = "(reco_shower_conversion_distance[0] <150)" name = "Shower Conv Distance"/>
<precut def = "reco_track_displacement[0]<300" name = "Track Disp"/>
<precut def = "reco_track_spacepoint_principal0[0]==reco_track_spacepoint_principal0[0]" name="pron"/>
<!--<precut def = "(reco_shower_dEdx_amalgamated[0]< 20) " name = "Shower dedx low"/>-->
<precut def = "reco_shower3d_exists" name = "Finite kalman dE/dx"/> 
 <precut def = "reco_shower3d_dEdx_plane0[0] > 0" name = "Finite kalman dE/dx plane 0"/> 

<!--<precut def = "reco_shower_kalman_exists" name = "Finite kalman dE/dx"/> 
 <precut def = "reco_shower_kalman_median_dEdx_plane0[0] > 0" name = "Finite kalman dE/dx plane 0"/> 
-->

 <!-- <precut def = "reco_shower_dEdx_plane0_median[0] > 0" name = "Finite kalman dE/dx plane 0"/> -->


<!-- <precut def = "(((reco_shower_kalman_exists*(reco_shower_kalman_median_dEdx_plane2*(reco_shower_kalman_median_dEdx_plane2>0)+(reco_shower_kalman_median_dEdx_plane2<0)*(reco_shower_kalman_median_dEdx_plane1>0)*reco_shower_kalman_median_dEdx_plane1+(reco_shower_kalman_median_dEdx_plane2<0 &amp;&amp; reco_shower_kalman_median_dEdx_plane1<0 &amp;&amp; reco_shower_kalman_median_dEdx_plane0>0)*reco_shower_kalman_median_dEdx_plane0)+(reco_shower_kalman_exists==0 &amp;&amp; reco_shower3d_dEdx_plane2>0)*reco_shower3d_dEdx_plane2)!=0)*(reco_shower_kalman_exists*(reco_shower_kalman_median_dEdx_plane2*(reco_shower_kalman_median_dEdx_plane2>0)+(reco_shower_kalman_median_dEdx_plane2<0)*(reco_shower_kalman_median_dEdx_plane1>0)*reco_shower_kalman_median_dEdx_plane1+(reco_shower_kalman_median_dEdx_plane2<0 &amp;&amp; reco_shower_kalman_median_dEdx_plane1<0 &amp;&amp; reco_shower_kalman_median_dEdx_plane0>0)*reco_shower_kalman_median_dEdx_plane0)+(reco_shower_kalman_exists==0 &amp;&amp; reco_shower3d_dEdx_plane2>0)*reco_shower3d_dEdx_plane2)+((reco_shower_kalman_exists*(reco_shower_kalman_median_dEdx_plane2*(reco_shower_kalman_median_dEdx_plane2>0)+(reco_shower_kalman_median_dEdx_plane2<0)*(reco_shower_kalman_median_dEdx_plane1>0)*reco_shower_kalman_median_dEdx_plane1+(reco_shower_kalman_median_dEdx_plane2<0 &amp;&amp; reco_shower_kalman_median_dEdx_plane1<0 &amp;&amp; reco_shower_kalman_median_dEdx_plane0>0)*reco_shower_kalman_median_dEdx_plane0)+(reco_shower_kalman_exists==0 &amp;&amp; reco_shower3d_dEdx_plane2>0)*reco_shower3d_dEdx_plane2)==0)*reco_shower_dEdx_amalgamated)>0" name = "huge"/> -->


<!-- ============================================== Variables, BDT training and otherwise ====================================== -->

<!--
<var def = "reco_shower_kalman_median_dEdx_plane2[0]" binning = "(45,0,10.0)" unit = "kalman dedx median plane 2 [mev/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower_kalman_median_dEdx_plane1[0]" binning = "(45,0,10.0)" unit = "kalman dedx median plane 1 [mev/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower_kalman_median_dEdx_plane0[0]" binning = "(45,0,10.0)" unit = "kalman dedx median plane 0 [mev/cm]" type = "d" logplot = "false" training =""/>
-->

<var def = "reco_shower3d_dEdx_plane2[0]" binning = "(45,0,10.0)" unit = "Shower3D dedx plane 2 [mev/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower3d_dEdx_plane1[0]" binning = "(45,0,10.0)" unit = "Shower3D dedx plane 1 [mev/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower3d_dEdx_plane0[0]" binning = "(45,0,10.0)" unit = "Shower3D dedx plane 0 [mev/cm]" type = "d" logplot = "false" training =""/>

<!--
<var def = "reco_shower_dEdx_plane2_median[0]" binning = "(45,0,10.0)" unit = "median dedx plane 2 [mev/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower_dEdx_plane1_median[0]" binning = "(45,0,10.0)" unit = "median dedx plane 1 [mev/cm]" type = "d" logplot = "false" training =""/>
<var def = "reco_shower_dEdx_plane0_median[0]" binning = "(45,0,10.0)" unit = "median dedx plane 0 [mev/cm]" type = "d" logplot = "false" training =""/>
-->


<var def = "reco_shower_impact_parameter[0]" binning = "(45,0,1000)" unit = "Shower Impact Parameter [cm]" type="d" logplot="false" training="01"/>
<var def = "(reco_shower_impact_parameter[0]/reco_shower_conversion_distance[0])" binning = "(45,0,1)" unit = "Shower Impact Parameter/Shower Conversion Distance" type="d" logplot="false" training="01"/>
<var def = "reco_shower_implied_dirx/reco_shower_dirx" binning = "(45,-1,3)" unit = "Shower Implied Dirx/Pandora Dirx" type="d" logplot="false" training="01"/>
<var def = "reco_shower_implied_diry/reco_shower_diry" binning = "(45,-1,3)" unit = "Shower Implied Diry/Pandora Diry" type="d" logplot="false" training="01"/>
<var def = "reco_shower_implied_dirz/reco_shower_dirz" binning = "(46,-1,3)" unit = "Shower Implied Dirz/Pandora Dirz" type="d" logplot="false" training="01"/>

<var def = "log10(Min$(isolation_min_dist_trk_shr))" binning = "(45,-1,3)" unit = "Min Dist from track to shower hit log[cm]" type="d" logplot="false" training="2"/>
<var def = "log10(Min$(isolation_min_dist_trk_unassoc))" binning = "(45,-1,3)" unit = "Min Dist from track to Unnass hit log[cm]" type="d" logplot="false" training="2"/>
<var def = "Sum$(isolation_num_shr_hits_win_2cm_trk)" binning = "(45,0,40)" unit = "Num Shr hits in 2cm" type="d" logplot="false" training="2"/>
<var def = "Sum$(isolation_num_unassoc_hits_win_2cm_trk)" binning = "(45,0,40)" unit = "Num Unnass hits in 2cm" type="d" logplot="false" training="2"/>
<var def = "Sum$(isolation_num_unassoc_hits_win_10cm_trk)" binning = "(45,0,200)" unit = "Num Unnass hits in 10cm" type="d" logplot="false" training="2"/>

<var def = "reco_shower_energy_max[0]/1000.0" binning = "(45,0,0.6)" unit = "Reconstructed Shower Energy [GeV]" type = "d" logplot = "false"  training="01"/>
<var def = "reco_shower_length[0]" binning = "(45,0,100)" unit = "Reconstructed Shower Length [cm]" type = "d" logplot = "false"  training="01"/>
<var def = "reco_shower_length[0]/(reco_shower_energy_max[0]/1000.0)" binning = "(45,0 ,2000)" unit = "Ratio Reconstruncted Shower Length/Reconstructed Shower Energy [cm/GeV]" type = "d" training="01"/>

<var def = "reco_shower_opening_angle[0]" binning = "(45,0,1)" unit = "Reconstructed Shower OpAng [cm]" type = "d" logplot = "false"  training="01"/>
<var def = "reco_shower_dEdx_amalgamated[0]" binning="(45,0.0,10.0)" unit = "Amalgamated Shower dE/dx [Mev/cm]" type = "d" logplot = "false"  training = ""/>
<var def = "reco_shower_conversion_distance[0]" binning = "(45,0,100)" unit = " Reconstructed Shower conversion distance [cm]" type = "d"   logplot="true" training=""/>
<var def = "log10(reco_shower_conversion_distance[0])" binning = "(45,-2,3)" unit = " Reconstructed Shower conversion distance Log[cm]" type = "d"   logplot="true" training="01"/>
<var def = "log10(sqrt(pow(reco_track_startx[0]-reco_shower_startx[0],2)+pow(reco_track_starty[0]-reco_shower_starty[0],2)+pow(reco_track_startz[0]-reco_shower_startz[0],2)))" binning = "(45,-2,3)" unit = "Distance from Track Start to Shower Start Log10[cm]" type="d" training=""/>

<var def = "((reco_shower_kalman_exists*(reco_shower_kalman_median_dEdx_plane2*(reco_shower_kalman_median_dEdx_plane2>0)+(reco_shower_kalman_median_dEdx_plane2<0)*(reco_shower_kalman_median_dEdx_plane1>0)*reco_shower_kalman_median_dEdx_plane1+(reco_shower_kalman_median_dEdx_plane2<0 &amp;&amp; reco_shower_kalman_median_dEdx_plane1<0 &amp;&amp; reco_shower_kalman_median_dEdx_plane0>0)*reco_shower_kalman_median_dEdx_plane0)+(reco_shower_kalman_exists==0 &amp;&amp; reco_shower3d_dEdx_plane2>0)*reco_shower3d_dEdx_plane2)!=0)*(reco_shower_kalman_exists*(reco_shower_kalman_median_dEdx_plane2*(reco_shower_kalman_median_dEdx_plane2>0)+(reco_shower_kalman_median_dEdx_plane2<0)*(reco_shower_kalman_median_dEdx_plane1>0)*reco_shower_kalman_median_dEdx_plane1+(reco_shower_kalman_median_dEdx_plane2<0 &amp;&amp; reco_shower_kalman_median_dEdx_plane1<0 &amp;&amp; reco_shower_kalman_median_dEdx_plane0>0)*reco_shower_kalman_median_dEdx_plane0)+(reco_shower_kalman_exists==0 &amp;&amp; reco_shower3d_dEdx_plane2>0)*reco_shower3d_dEdx_plane2)+((reco_shower_kalman_exists*(reco_shower_kalman_median_dEdx_plane2*(reco_shower_kalman_median_dEdx_plane2>0)+(reco_shower_kalman_median_dEdx_plane2<0)*(reco_shower_kalman_median_dEdx_plane1>0)*reco_shower_kalman_median_dEdx_plane1+(reco_shower_kalman_median_dEdx_plane2<0 &amp;&amp; reco_shower_kalman_median_dEdx_plane1<0 &amp;&amp; reco_shower_kalman_median_dEdx_plane0>0)*reco_shower_kalman_median_dEdx_plane0)+(reco_shower_kalman_exists==0 &amp;&amp; reco_shower3d_dEdx_plane2>0)*reco_shower3d_dEdx_plane2)==0)*reco_shower_dEdx_amalgamated" binning = "(45,0,10.0)" unit = "Huge dEdx [Mev/cm]" type = "d" logplot = "false" training = "012"/>


<var def = "reco_shower_phi_yx[0]" binning = "(45,-3.14,3.14)" unit = "Reconstructed Shower  #phi_{yx} [rad]" type = "d" logplot = "false"  training="012"/>
<var def = "reco_shower_theta_yz[0]" binning = "(45,-3.14,3.14)" unit = "Reconstructed Shower #theta_{yz} [rad]" type = "d" logplot = "false"  training="012"/>
<var def = "reco_shower_nuscore[0]" binning = "(45, 0, 1)" unit = "Reconstructed Shower Associated Slice Neutrino Score" type = "d" logplot = "false"  training="01"/>
<var def = "reco_track_displacement[0]" binning = "(45,0,500)" unit = "Track Displacement [cm]" type = "d" logplot = "false"  training="01"/>
<var def = "reco_track_phi_yx[0]" binning = "(45,-3.14,3.14)" unit = "Reconstructed Track Phi yx" type = "d" logplot = "false"  training="01"/>
<var def = "reco_track_theta_yz[0]" binning = "(45,-3.14,3.14)" unit = "Reconstructed Track Theta yz" type = "d" logplot = "false"  training="01"/>
<var def = "log10(reco_track_spacepoint_max_dist[0])" binning = "(45,-2,2)" unit = "Reco Track Max Dist Spacepoint from Line" type = "d" training = "012"/>

<var def = "(TMath::Min(TMath::Min(TMath::Min(fabs(reco_track_endy[0]+117), fabs(reco_track_endy[0]-117)) ,  TMath::Min(fabs(reco_track_endx[0]-0), fabs(reco_track_endx[0]-256))), TMath::Min(fabs(reco_track_endz[0]-0), fabs(reco_track_endz[0]-1036))))" binning = "(45,0,125)" unit = " Reconstructed Track End distance to wall [cm]" type = "d" logplot = "false"  training="01"/>
<var def = "(TMath::Min(TMath::Min(TMath::Min(fabs(reco_track_starty[0]+117), fabs(reco_track_starty[0]-117)) ,  TMath::Min(fabs(reco_track_startx[0]-0), fabs(reco_track_startx[0]-256))), TMath::Min(fabs(reco_track_startz[0]-0), fabs(reco_track_startz[0]-1036))))" binning = "(45,0,125)" unit = " Reconstructed Track Start distance to wall [cm]" type = "d" logplot = "false"  training="01"/>

<var def = "reco_shower_energy_max[0]+reco_track_proton_kinetic_energy[0]*1000" binning = "(45,0.0, 1600)" unit = "Total Visible Energy [MeV]" type = "d" training="01" />

<var def = "TMath::Min(sqrt(pow(reco_track_endx[0]-reco_shower_startx[0],2)+pow(reco_track_endy[0]-reco_shower_starty[0],2)+pow(reco_track_endz[0]-reco_shower_startz[0],2)), sqrt(pow(reco_track_startx[0]-reco_shower_startx[0],2)+pow(reco_track_starty[0]-reco_shower_starty[0],2)+pow(reco_track_startz[0]-reco_shower_startz[0],2)))" binning = "(45,0,100)" unit = "Min distance from Shower to track start or end  cm" type="d" training="01"/>

<var def = "reco_vertex_x" binning = "(45,-20,270)" unit = "Reco Vertex X [cm]" type="d" logplot="false" training=""/>
<var def = "reco_vertex_y" binning = "(45,-140,140)" unit = "Reco Vertex Y [cm]" type="d" logplot="false" training=""/>
<var def = "reco_vertex_z" binning = "(45,-20,1100)" unit = "Reco Vertex Z [cm]" type="d" logplot="false" training=""/>

<var def = "reco_track_mean_trunc_dEdx_best_plane[0]" binning =  "(45,0,12)" unit = "Reco Track Truncated Mean dE/dx Best Plane [MeV/cm]" type = "d" logplot = "false"  training="01"/>
<var def = "reco_track_proton_kinetic_energy[0]" binning = "(45,0,1)" unit = "Reconstructed Track Kinetic Energy [GeV]" type = "d" logplot = "false" training = "01"/>
<var def = "reco_track_mean_trunc_dEdx_start_half_best_plane[0]/reco_track_mean_trunc_dEdx_end_half_best_plane[0]" binning = "(45,0,3.5)" unit = "Ratio of Truncated Mean Start/End Track dE/dx Best Plane" type = "d" logplot = "false" training = "01"/>
<var def =  "reco_track_trunc_PIDA_best_plane[0]" binning = "(45, 0, 60)" unit = "Reconstructed Track PIDA Best Plane" type = "d" logplot = "false" training = ""/>

<!--pip's PID-->
<var def =  "log10(reco_track_pid_three_plane_proton_pid[0])" binning = "(45,-2,2)"  unit ="Log( Three Plane Track PID )" type = "d" logplot = "false" training="01"/>

<!-- other PID algorithms-->

<var def = "sqrt(#PM# +#PE#)*12.0" binning = "(10,0,1)" unit = "My Fake Variable [GeV]" type = "d"  training = "01"/>

<var def = "(reco_track_proton_kinetic_energy[0]+0.938272)*(reco_track_dirx[0])+(reco_shower_energy_max[0]*0.001)*reco_shower_dirx[0]" binning = "(45,-2,2)" unit = "Reconstructed Delta Momentum X [GeV]" type = "d" logplot = "false" training = "012" /> 
<var def = "(reco_track_proton_kinetic_energy[0]+0.938272)*(reco_track_diry[0])+(reco_shower_energy_max[0]*0.001)*reco_shower_diry[0]" binning = "(45,-2,2)" unit = "Reconstructed Delta Momentum Y [GeV]" type = "d" logplot = "false" training = "012" /> 
<var def = "(reco_track_proton_kinetic_energy[0]+0.938272)*(reco_track_dirz[0])+(reco_shower_energy_max[0]*0.001)*reco_shower_dirz[0]" binning = "(45,-1.5,1.9)" unit = "Reconstructed Delta Momentum Z [GeV]" type = "d" logplot = "false" training = "012" /> 
<var def = "sqrt(pow((reco_track_proton_kinetic_energy[0]+0.938272)*(reco_track_dirx[0])+(reco_shower_energy_max[0]*0.001)*reco_shower_dirx[0],2)+pow(    (reco_track_proton_kinetic_energy[0]+0.938272)*(reco_track_diry[0])+(reco_shower_energy_max[0]*0.001)*reco_shower_diry[0],2))" binning = "(45,0,2)" unit = "Reconstucted Delta Transverse (YX) Momentum [GeV]" type = "d" logplot = "false" training = "012"/>
<var def = "(reco_track_dirx[0]*reco_shower_dirx[0]+reco_track_diry[0]*reco_shower_diry[0]+reco_track_dirz[0]*reco_shower_dirz[0])" binning = "(45,-1,1)" unit = "Cosine Angle Between Track and Shower" type ="d" training ="012"/>
<var def = "acos(reco_track_dirx[0]*reco_shower_dirx[0]+reco_track_diry[0]*reco_shower_diry[0]+reco_track_dirz[0]*reco_shower_dirz[0])" binning = "(45,-0.1,3.3)" unit = "Angle Between Track and Shower" type ="d" training =""/>
<var def = "(reco_track_dirx[0]*reco_shower_implied_dirx[0]+reco_track_diry[0]*reco_shower_implied_diry[0]+reco_track_dirz[0]*reco_shower_implied_dirz[0])" binning = "(45,-1,1)" unit = "Cosine Angle Between Track and Shower (implied)" type ="d" training ="012"/>

<var def = "(reco_track_spacepoint_principal0[0])" binning = "(45,0,1)" unit = "Track Spacepoint Principal" type ="d" training ="01"/>
<var def = "(reco_track_trackscore[0])" binning = "(45,0.5,1)" unit = "Track Score" type ="d" training ="01"/>
<var def = "(reco_shower_trackscore[0])" binning = "(45,0,0.5)" unit = "Shower Score" type ="d" training ="01"/>

<var def = "sqrt(pow(reco_track_startx[0]-reco_vertex_x,2)+pow(reco_track_starty[0]-reco_vertex_y,2)+pow(reco_track_startz[0]-reco_vertex_z,2))" binning = "(45,0,4)" unit = "Distance from Track Start to Vertex" type="d" training="01"/>
<var def = "reco_asso_tracks" binning = "(4,0,4)" unit = "Reco Track Num " type = "d" training=""/>

<!-- Mark is Bored on flight to Korea variables but he remembered to grab a local copy of all stage 0 vertexed files so is doing 14 hours of "feature development" wooo -->

<var def = "reco_shower_energy_max/(3.0*(reco_shower_num_hits_plane2+reco_shower_num_hits_plane0+reco_shower_num_hits_plane1))" unit="Ratio of energy to number of hits" binning = "(45,0,1)" type="d" training="012"/>

<var def = "reco_shower_energy_max/(100.0*reco_shower_length*reco_shower_opening_angle)" unit = "ratio of calo energy to geometric size" binning = "(45,0,1.5)" type = "d" training = "01"/>
<var def = "TMath::Min(TMath::Min(reco_track_end_to_nearest_dead_wire_plane0,reco_track_end_to_nearest_dead_wire_plane1),reco_track_end_to_nearest_dead_wire_plane2)" unit = "(distance from track end to nearest dead wire)" binning ="(45,0,3)" type="d" training="01"/>
<var def = "TMath::Min(TMath::Min(reco_shower_start_to_nearest_dead_wire_plane0,reco_shower_start_to_nearest_dead_wire_plane1),reco_shower_start_to_nearest_dead_wire_plane2)" unit = "(distance from shower start to nearest dead wire)" binning ="(45,0,3)" type="d" training="01"/>
<var def = "sqrt(pow(0.001*reco_shower_energy_max[0]*reco_shower_diry[0],2)+pow(0.001*reco_shower_energy_max[0]*reco_shower_dirx[0],2))" unit = "Photon Transverse Momentum [GeV]" binning = "(45,0,0.6)" type = "d" training = "01"/>
<var def = "sqrt(pow(0.001*reco_shower_energy_max[0]*reco_shower_implied_diry[0],2)+pow(0.001*reco_shower_energy_max[0]*reco_shower_implied_dirx[0],2))" unit = "Photon Implied Transverse Momentum [GeV]" binning = "(45,0,0.6)" type = "d" training = "012"/>

<var def = "sqrt(pow(#PE#*reco_track_diry[0],2)+pow(#PE#*reco_track_dirx[0],2))" unit = "Proton Transverse Momentum [GeV]" binning = "(45,0,2)" type = "d" training = "012"/>
<var def = "(#GTM#-#PTM#)/(#GTM#+#PTM#)" unit = "Transverse Momentum Assymetry" binning = "(45,-1,1)" type = "d" training = "012"/>

<!-- # sqrt(m1^2+m2^2 + 2*E2(E1 -p1cos()) -->
<var def = "sqrt(#PM#*#PM#+2.0*reco_shower_energy_max[0]*0.001*(#PE#-#PP#*(reco_track_dirx[0]*reco_shower_implied_dirx[0]+reco_track_diry[0]*reco_shower_implied_diry[0]+reco_track_dirz[0]*reco_shower_implied_dirz[0])))" binning = "(45,0.85,1.8)" unit = "Implied Invariant Mass of photon-proton pair [GeV]" type  = "d" training = "012"/>


<var def = "Min$(sss_candidate_impact_parameter)" binning="(45,0,30)" unit = "Min Second Shower candidate Impact Parameter [cm]" type ="d" training="2"/>
<var def = "sss_num_candidates" binning="(45,0,15)" unit = "Second Shower Number of  candidate" type ="d" training="2"/>
<var def = "sss_num_unassociated_hits/(sss_num_associated_hits+sss_num_unassociated_hits)" binning="(45,0,1)" unit = "Fraction of unassocaited hits in slice [cm]" type ="d" training="2"/>
<var def = "log10(sss_num_unassociated_hits)" binning="(45,0,4)" unit = "Number of unassocaited hits in slice log10" type ="d" training="2"/>
<var def = "log10(Min$(sss_candidate_min_dist))" binning="(45,-1,3)" unit = "Min Min dist" type = "d" training = "2"/>
<var def = "log10(Sum$(sss_candidate_min_dist)/Length$(sss_candidate_min_dist))" binning="(45,-1,3)" unit = "Mean Min dist" type = "d" training = "2"/>

<var def = "reco_shower_num_daughters" binning = "(3,0,3)" unit = "Num Dau Shower" type="d" training=""/>
<var def = "reco_track_num_daughters" binning = "(3,0,3)" unit = "Num Dau Track" type="d" training=""/>
<var def = "sss_candidate_veto_score*(sss_num_candidates>0)" binning = "(45,0,1)" unit = "SSS v1 Candidate Score" type="d" training=""/>

<!-- ================= RECO-MC Matching ======================== -->

<recomc>
    <def name="NC #Delta Radiative #gamma" col ="(1.0,0.4,0.4)"> 
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] != 111 &amp;&amp; mctruth_is_delta_radiative ==1 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def> 
    <def name="CC #pi^{0}" col ="(0.0,0.0,0.4)"> 
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] == 111 &amp;&amp; mctruth_cc_or_nc==0 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def> 
    <def name = "NC #pi^{0}" col="(0.0,0.0,1.0)">
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] == 111 &amp;&amp; mctruth_cc_or_nc==1 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def>
    <def name = "Non #pi^{0} #gamma" col="(0.8,0.2,0.8)">
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] != 111 &amp;&amp; mctruth_is_delta_radiative!=1 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def>
    <def name = "Intrinsic #nu_{e} electron" col="(1.0,1.0,0.4)">
        (mctruth_lepton_pdg[0])==11 &amp;&amp; abs(sim_shower_pdg[0]) ==11 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def>
    <def name = "BNB Michel e^{#pm}" col="(1.0,0.6,0.0)">
        abs(sim_shower_pdg[0]) ==11 &amp;&amp; abs(sim_shower_parent_pdg[0])==13 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )
    </def>
    <def name = "Overlay" col="(0.2,0.8,0.2)">
        (sim_shower_overlay_fraction[0] >=0.8 )
    </def>


</recomc>


<alias key="PM" value ="(0.938272)"/>
<alias key="PE" value ="(reco_track_proton_kinetic_energy[0]+0.938272)"/>
<alias key="PP" value = "(sqrt(pow(reco_track_proton_kinetic_energy[0]+0.938272,2)-0.938272*0.938272))"/>
<alias key="LT" value ="0"/>

<alias key = "GTM" value = "sqrt(pow(0.001*reco_shower_energy_max[0]*reco_shower_diry[0],2)+pow(0.001*reco_shower_energy_max[0]*reco_shower_dirx[0],2))"/>
<alias key = "PTM" value = "sqrt(pow((reco_track_proton_kinetic_energy[0]+0.938272)*reco_track_diry[0],2)+pow((reco_track_proton_kinetic_energy[0]+0.938272)*reco_track_dirx[0],2))"/>
